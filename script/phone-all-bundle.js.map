{"version":3,"sources":["webpack:///phone-all-bundle.js","webpack:///webpack/bootstrap 60ea714ee91e82d39c24?dddb","webpack:///./src/script/phone-all-countries.coffee","webpack:///./src/script/Phone.coffee","webpack:///./src/script/countries/ARG.coffee","webpack:///./src/script/countries/BOL.coffee","webpack:///./src/script/countries/BRA.coffee","webpack:///./src/script/countries/CHL.coffee","webpack:///./src/script/countries/CAN.coffee","webpack:///./src/script/countries/COL.coffee","webpack:///./src/script/countries/ECU.coffee","webpack:///./src/script/countries/GTM.coffee","webpack:///./src/script/countries/GBR.coffee","webpack:///./src/script/countries/MEX.coffee","webpack:///./src/script/countries/PRY.coffee","webpack:///./src/script/countries/PER.coffee","webpack:///./src/script/countries/URY.coffee","webpack:///./src/script/countries/USA.coffee","webpack:///./src/script/PhoneNumber.coffee","webpack:///./src/script/countries/NANP.coffee"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Phone","argentina","bolivia","brazil","canada","chile","colombia","ecuador","gbr","guatemala","mexico","paraguay","peru","uruguay","usa","window","vtex","phone","bind","fn","me","apply","arguments","this","getCountryCodeByNameAbbr","getCountryCodeByName","format","testNDC","testCountryCode","validate","compact","normalize","getPhoneInternational","getPhoneNational","INTERNATIONAL","NATIONAL","LOCAL","countries","prototype","nationalNumber","givenCountryCode","givenNationalDestinationCode","countryObj","foundNDC","i","len","nationalDestinationCode","ndcRegex","phoneNumber","ref","ref1","ref2","withoutNDC","length","replace","specialRules","valid","number","countryCode","countryCodeRegex","foundCountryCode","withoutCountryCode","array","element","newArray","push","regex","test","RegExp","ndcPattern","optionalTrunkPrefix","resultString","separator","splitNumber","join","nationalNumberSeparator","name","key","value","countryName","nameAbbr","countryNameAbbr","Argentina","PhoneNumber","ndc","ndcArray","slice","isMobile","split","Bolivia","Brazil","noNineDigitsNDC","noNineDigitsPattern","indexOf","Chile","nanp","Colombia","Ecuador","Guatemala","item","l","mobileNumbers","UnitedKingdom","uk","mobileRegex","splitRegexs","validLengths","leadingDigits","pattern","findSplitter","splitter","nmbr","potentialSplitGrp","Mexico","Paraguay","Peru","Uruguay","isValid","NANP","usaNationalDestinationCode","canadaNationalDestinationCode","concat"],"mappings":";CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,uBAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GE5ChC,GAAAW,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAAAd,GAAQX,EAAQ,GAAhBY,EAEYZ,EAAQ,GAFpBa,EAGYb,EAAQ,GAHpBc,EAIYd,EAAQ,GAJpBgB,EAKYhB,EAAQ,GALpBe,EAMYf,EAAQ,GANpBiB,EAOYjB,EAAQ,GAPpBkB,EAQYlB,EAAQ,GARpBoB,EASYpB,EAAQ,GATpBmB,EAUYnB,EAAQ,IAVpBqB,EAWYrB,EAAQ,IAXpBsB,EAYYtB,EAAQ,IAZpBuB,EAaYvB,EAAQ,IAbpBwB,EAcYxB,EAAQ,IAdpByB,EAeYzB,EAAQ,IAfpB0B,OAiBOC,KAAOD,OAAOC,SAjBrBD,OAkBOC,KAAKC,MAAQjB,EAlBpBP,EAoBOD,QAAUQ,GFmEX,SAASP,EAAQD,EAASH,GGtFhC,GAAAW,GAAAkB,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,YAAAtB,GAAA,WACc,QAAAA,KAEZuB,KAAAC,yBAAAN,EAAAK,KAAAC,yBAAAD,WAAAE,qBAAAP,EAAAK,KAAAE,qBAAAF,WAAAG,OAAAR,EAAAK,KAAAG,OAAAH,WAAAI,QAAAT,EAAAK,KAAAI,QAAAJ,WAAAK,gBAAAV,EAAAK,KAAAK,gBAAAL,WAAAM,SAAAX,EAAAK,KAAAM,SAAAN,WAAAO,QAAAZ,EAAAK,KAAAO,QAAAP,WAAAQ,UAAAb,EAAAK,KAAAQ,UAAAR,WAAAS,sBAAAd,EAAAK,KAAAS,sBAAAT,WAAAU,iBAAAf,EAAAK,KAAAU,iBAAAV,WAACW,cAAgB,EAGjBX,KAACY,SAAW,EAGZZ,KAACa,MAAQ,EAETb,KAACc,aHkRA,MG5RFrC,GAAAsC,UAYAL,iBAAkB,SAACM,EAAgBC,EAAkBC,GACpD,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAAA,IAAiC,OAAlBb,EAAf,MAAO,KAIP,IAHAA,EAAiBhB,KAACQ,UAAUQ,GAE5BG,EAAanB,KAACc,UAAUG,IACrBE,EAAoB,MAAO,KAE9B,IAAGD,EACFK,EAA0BL,EAC1BQ,EAAuB1B,KAACI,QAAQmB,EAAyBJ,EAAYH,GAApEI,EAAAM,EAAA,GAAUF,EAAAE,EAAA,OAEX,KAAAC,EAAAR,EAAAI,wBAAAF,EAAA,EAAAC,EAAAK,EAAAG,OAAAR,EAAAD,IHqGME,EAA0BI,EAAKN,GGpGpCO,EAAuB5B,KAACI,QAAQmB,EAAyBJ,EAAYH,GAApEI,EAAAQ,EAAA,GAAUJ,EAAAI,EAAA,GACFR,KAAY,GAFtBC,KAID,MAAGD,IAEHS,EAAab,EAAee,QAAQP,EAAU,IAE9CC,EAAcN,EAAWa,aAAahB,EAAgBa,EAAYN,GAE/DE,GACFA,EAAYQ,OAAM,GACXR,GAEA,MAVoB,MA3B7BhD,EAAAsC,UAuCAN,sBAAuB,SAACyB,EAAQjB,EAAkBC,GACjD,GAAAiB,GAAAC,EAAAjB,EAAAkB,EAAAX,EAAAC,EAAAC,EAAAU,CAAA,IAAyB,OAAVJ,EAAf,MAAO,KAGP,IAFAA,EAASlC,KAACQ,UAAU0B,GAEjBjB,EACFkB,EAAclB,EACdS,EAAuC1B,KAACK,gBAAgB8B,EAAaD,GAApEG,EAAAX,EAAA,GAAkBU,EAAAV,EAAA,OAFpB,CAICC,EAAA3B,KAAAc,SAAA,KAAAqB,IAAAR,GAEC,GH2GKR,EAAaQ,EAAKQ,GG5GvBP,EAAuC5B,KAACK,gBAAgB8B,EAAaD,GAApEG,EAAAT,EAAA,GAAkBQ,EAAAR,EAAA,GACVS,KAAoB,EAA7B,MAEF,MAAGA,IAEHC,EAAqBJ,EAAOH,QAAQK,EAAkB,IAC/CpC,KAACU,iBAAiB4B,EAAoBH,EAAajB,IAHtB,MAnDrCzC,EAAAsC,UAwDAP,UAAW,SAAC0B,GAEX,MAAOA,GAAOH,QAAQ,2BAA4B,KA1DnDtD,EAAAsC,UA4DAR,QAAS,SAACgC,GACT,GAAAC,GAAAnB,EAAAC,EAAAmB,CACA,KADAA,KACApB,EAAA,EAAAC,EAAAiB,EAAAT,OAAAR,EAAAD,MHoHKmB,EAAUD,EAAMlB,GGnHkB,KAAbmB,GAAzBC,EAASC,KAAKF,EACf,OAAOC,IAhERhE,EAAAsC,UAkEAT,SAAU,SAAC4B,EAAQjB,GAClB,GAAAkB,GAAAhB,EAAAO,CAAA,IAA0B,OAAVQ,EAAhB,OAAO,CAGP,IAFAA,EAASlC,KAACQ,UAAU0B,GAEjBjB,EACF,MAAOjB,MAACc,UAAUG,GAAkB0B,MAAMC,KAAKV,EAE/CR,GAAA1B,KAAAc,SAAA,KAAAqB,IAAAT,GACC,GH2HKP,EAAaO,EAAIS,GG3HPhB,EAAWwB,MAAMC,KAAKV,GAArC,OAAO,CACR,QAAO,GA3ETzD,EAAAsC,UA6EAV,gBAAiB,SAAC8B,EAAaD,GAC9B,GAAAE,EAEA,OAFAA,GAAuB,GAAAS,QAAO,IAAIV,GAE/BC,EAAiBQ,KAAKV,KAAc,EAAME,KAAwB,EAAO,OAhF7E3D,EAAAsC,UAkFAX,QAAS,SAACmB,EAAyBJ,EAAYe,GAC9C,GAAAY,GAAAtB,CAGA,OAHAsB,GAAa,KAAK3B,EAAW4B,oBAAoB,KAAKxB,EACtDC,EAAe,GAAAqB,QAAOC,GAEnBtB,EAASoB,KAAKV,KAAc,EAAMV,KAAgB,EAAO,OAtF7D/C,EAAAsC,UAwFAZ,OAAQ,SAACT,EAAOS,GACf,GAAA6C,GAAAC,EAAAC,CAAA,IH4IiB,MAAV/C,IG7IQA,EAASH,KAACW,eACD,OAATjB,EAAf,MAAO,KAEP,IAAGM,KAACc,UAAUpB,EAAMyC,aAAahC,OAChC,MAAOH,MAACc,UAAUpB,EAAMyC,aAAahC,OAAOT,EAAOS,EAMpD,QAJA6C,EAAe,GAEfE,EAAclD,KAACc,UAAUpB,EAAMyC,aAAae,YAAYxD,EAAMwC,QAEvD/B,GAAP,IACMH,MAACW,cACLqC,EAAe,IAAMtD,EAAMyC,YAAc,IACtCzC,EAAM6B,0BACRyB,GAAgBtD,EAAM6B,wBAA0B,KACjDyB,GAAgBE,EAAYC,KAAK,IAJ7B,MADN,KAOMnD,MAACY,SACFlB,EAAM6B,0BACRyB,GAAgB,IAAMtD,EAAM6B,wBAA0B,MACvD0B,EAAYjD,KAACc,UAAUpB,EAAMyC,aAAaiB,wBAC1CJ,GAAgBE,EAAYC,KAAKF,EAJ7B,MAPN,KAaMjD,MAACa,MACLoC,EAAYjD,KAACc,UAAUpB,EAAMyC,aAAaiB,wBAC1CJ,EAAeE,EAAYC,KAAKF,GAElC,MAAOD,IAnHRvE,EAAAsC,UAqHAb,qBAAsB,SAACmD,GACtB,GAAAC,GAAA5B,EAAA6B,CAAA7B,GAAA1B,KAAAc,SAAA,KAAAwC,IAAA5B,GACC,GHmJI6B,EAAQ7B,EAAI4B,GGnJbC,EAAMC,cAAeH,EACvB,MAAOE,GAAMpB,aAxHhB1D,EAAAsC,UA0HAd,yBAA0B,SAACwD,GAC1B,GAAAH,GAAA5B,EAAA6B,CAAA7B,GAAA1B,KAAAc,SAAA,KAAAwC,IAAA5B,GACC,GHyJI6B,EAAQ7B,EAAI4B,GGzJbC,EAAMG,kBAAmBD,EAC3B,MAAOF,GAAMpB,aH+JP1D,KG7RVP,EAiIOD,QAAc,GAAAQ,IHqKf,SAASP,EAAQD,EAASH,GItShC,GAAA6F,GAAAlF,EAAAmF,EAAAlF,EAAAiB,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,YAAAtB,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtB6F,EAAA,WAQc,QAAAA,KACZ3D,KAAAG,OAAAR,EAAAK,KAAAG,OAAAH,WAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,YACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,KACfnC,KAAC2C,MAAQ,mjEACT3C,KAAC+C,oBAAsB,IACvB/C,KAACoD,wBAA0B,IAC3BpD,KAACuB,ygYpzE,MIzYFoC,GAAA5C,UAYAiB,aAAc,SAACM,EAAoBT,EAAYgC,GAC9C,GAAAzC,GAAAC,EAAAC,EAAAC,EAAAuC,EAAAtC,EAAA9B,EAAAgC,CACA,IADAhC,EAAY,GAAAkE,GAAY5D,KAAC0D,gBAAiB1D,KAACmC,YAAa0B,EAAKhC,GACnD,MAAPgC,EAAH,CAIE,IAHAvB,EAAqBT,EAErBiC,EAAW9D,KAACuB,wBAAwBwC,MAAM,GAC1C1C,EAAA,EAAAC,EAAAwC,EAAAhC,OAAAR,EAAAD,IJ0SKE,EAA0BuC,EAASzC,GIzSvCK,EAAuBjD,EAAM2B,QAAQmB,EAAyBvB,KAAGsC,GAAhElB,EAAAM,EAAA,GAAUF,EAAAE,EAAA,GACFN,KAAY,GAFtBC,KAGA,MAAeD,IACfS,EAAaS,EAAmBP,QAAQP,EAAU,IACnCK,EAAWC,OAASP,EAAwBO,SAAY,GAAhE,MAEPpC,EAAMsE,UAAW,EACjBtE,EAAM6B,wBAA0BA,EAChC7B,EAAMwC,OAASL,EACRnC,IAPA,KAQJ,MAAG,MAAMkD,KAAKf,IAAiBgC,EAAI/B,OAASD,EAAWC,SAAW,IACrED,EAAaA,EAAWE,QAAQ,MAAO,IACvCrC,EAAMsE,UAAW,EACjBtE,EAAMwC,OAASL,EACRnC,GACAmE,EAAI/B,OAASD,EAAWC,SAAW,GACpCpC,EADH,QAlCNiE,EAAA5C,UAsCAmC,YAAa,SAAChB,GACb,OAAOA,EAAOJ,QAAd,IACM,GACJ,MAAOrD,GAAM8B,QAAQ2B,EAAO+B,MAAM,kBAFpC,KAGM,GACJ,MAAOxF,GAAM8B,QAAQ2B,EAAO+B,MAAM,kBAJpC,KAKM,GACJ,MAAOxF,GAAM8B,QAAQ2B,EAAO+B,MAAM,mBAEpC,OAAQ/B,IA/CTyB,EAAA5C,UAiDAZ,OAAQ,SAACT,EAAOS,GACf,GAAA6C,GAAAC,EAAAC,CAIA,QJ+SiB,MAAV/C,IIpTQA,EAAS1B,EAAMkC,eAC9BqC,EAAe,GAEfE,EAAczE,EAAMqC,UAAUpB,EAAMyC,aAAae,YAAYxD,EAAMwC,QAE5D/B,GAAP,IACM1B,GAAMkC,cACVqC,EAAe,IAAMtD,EAAMyC,YAAc,IACtCzC,EAAMsE,WAAchB,GAAgB,MACpCtD,EAAM6B,0BACRyB,GAAgBtD,EAAM6B,wBAA0B,KACjDyB,GAAgBE,EAAYC,KAAK,IAL7B,MADN,KAOM1E,GAAMmC,SACPlB,EAAM6B,0BACRyB,GAAgB,IAAMtD,EAAM6B,wBAA0B,MACvD0B,EAAYxE,EAAMqC,UAAUpB,EAAMyC,aAAaiB,wBAC5C1D,EAAMsE,WAAchB,GAAgB,OACvCA,GAAgBE,EAAYC,KAAKF,EAL7B,MAPN,KAaMxE,GAAMoC,MACVoC,EAAYxE,EAAMqC,UAAUpB,EAAMyC,aAAaiB,wBAC/CJ,EAAeE,EAAYC,KAAKF,EAF5B,MAbN,SAiBED,EAAe,GAEjB,MAAOA,IJgUCW,KIjZVjF,EAoFgB,GAAAiF,GApFhBlF,EAqFMqC,UAAU,IAAQpC,EArFxBR,EAwFOD,QAAUS,GJsUX,SAASR,EAAQD,EAASH,GK9ZhC,GAAAoG,GAAAzF,EAAAmF,EAAAjF,EAAAgB,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,YAAAtB,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtBoG,EAAA,WAMc,QAAAA,KACZlE,KAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,UACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,MACfnC,KAAC2C,MAAQ,qDACT3C,KAAC+C,oBAAsB,IACvB/C,KAACoD,wBAA0B,IAC3BpD,KAACuB,yBAEC,IAAK,IAAK,KLkbX,MK3bF2C,GAAAnD,UAYAiB,aAAc,SAACM,EAAoBT,EAAYgC,GAC9C,GAAAnE,EACA,OADAA,GAAY,GAAAkE,GAAY5D,KAAC0D,gBAAiB1D,KAACmC,YAAa0B,EAAKhC,IAb9DqC,EAAAnD,UAgBAmC,YAAa,SAAChB,GACb,MAAoB,KAAjBA,EAAOJ,OACFrD,EAAM8B,QAAQ2B,EAAO+B,MAAM,oBAE3B/B,ILuaAgC,KKjcVvF,EA6Bc,GAAAuF,GA7BdzF,EA8BMqC,UAAU,KAASnC,EA9BzBT,EAiCOD,QAAUU,GL6aX,SAAST,EAAQD,EAASH,GM9chC,GAAAqG,GAAA1F,EAAAmF,EAAAhF,EAAAe,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,YAAAtB,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtBqG,EAAA,WAQc,QAAAA,KACZnE,KAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,SACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,KACfnC,KAAC2C,MAAQ,8IACT3C,KAAC+C,oBAAsB,IACvB/C,KAACoD,wBAA0B,IAC3BpD,KAACuB,yBAEC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MN2era,MMpfF4C,GAAApD,UAYAiB,aAAc,SAACM,EAAoBT,EAAYgC,GAE9C,GAAAO,GAAAC,EAAA3E,CAIA,OAJA0E,IAAmB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACjJC,EAA0B,GAAAxB,QAAO,SAASuB,EAAgBjB,KAAK,KAAK,KACpEzD,EAAY,GAAAkE,GAAY5D,KAAC0D,gBAAiB1D,KAACmC,YAAa0B,EAAKhC,GAErC,IAArBA,EAAWC,QAA2C,IAA3BD,EAAWyC,QAAQ,MAAcD,EAAqBzB,KAAKiB,GAIhE,IAArBhC,EAAWC,OAAwBpC,EAAtC,QAHAA,EAAMsE,UAAW,EACVtE,IApBTyE,EAAApD,UAwBAmC,YAAa,SAAChB,GACb,MAAoB,KAAjBA,EAAOJ,OACFrD,EAAM8B,QAAQ2B,EAAO+B,MAAM,mBACV,IAAjB/B,EAAOJ,QAAuC,IAAvBI,EAAOoC,QAAQ,KACtC7F,EAAM8B,QAAQ2B,EAAO+B,MAAM,oBAE3B/B,INsdAiC,KM5fVvF,EAyCa,GAAAuF,GAzCb1F,EA0CMqC,UAAU,IAAQlC,EA1CxBV,EA6COD,QAAUW,GN4dX,SAASV,EAAQD,EAASH,GOzgBhC,GAAAyG,GAAA9F,EAAAmF,EAAA9E,EAAAa,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,YAAAtB,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtByG,EAAA,WAQc,QAAAA,KACZvE,KAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,QACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,KACfnC,KAAC2C,MAAQ,oHACT3C,KAAC+C,oBAAsB,IACvB/C,KAACoD,wBAA0B,IAC3BpD,KAACuB,yBAEC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAM,KPyjB9H,MOlkBFgD,GAAAxD,UAYAiB,aAAc,SAACM,EAAoBT,EAAYgC,GAC9C,GAAAnE,EACA,QADAA,EAAY,GAAAkE,GAAY5D,KAAC0D,gBAAiB1D,KAACmC,YAAa0B,EAAKhC,GACtDgC,GAAP,IACM,IACJ,GAAwB,IAArBhC,EAAWC,OAAiB,MAAOpC,EADlC,MADN,KAGM,IACJ,GAAwB,IAArBmC,EAAWC,OAIb,MAHApC,GAAMsE,UAAW,EACjBtE,EAAM6B,wBAA0B,GAChC7B,EAAMwC,OAASI,EACR5C,CALJ,MAHN,KASM,KACJ,GAAwB,IAArBmC,EAAWC,OAAiB,MAAOpC,EADlC,MATN,SAaE,GAAwB,IAArBmC,EAAWC,QAAoC,IAArBD,EAAWC,OAAiB,MAAOpC,KA3BnE6E,EAAAxD,UA6BAmC,YAAa,SAAChB,GACb,OAAOA,EAAOJ,QAAd,IACM,GACJ,MAAOrD,GAAM8B,QAAQ2B,EAAO+B,MAAM,yBAFpC,KAGM,GACJ,MAAOxF,GAAM8B,QAAQ2B,EAAO+B,MAAM,kBAJpC,KAKM,GACJ,MAAOxF,GAAM8B,QAAQ2B,EAAO+B,MAAM,kBANpC,KAOM,GACJ,MAAOxF,GAAM8B,QAAQ2B,EAAO+B,MAAM,mBAEpC,OAAQ/B,IP0hBAqC,KO1kBVzF,EAmDY,GAAAyF,GAnDZ9F,EAoDMqC,UAAU,IAAQhC,EApDxBZ,EAuDOD,QAAUa,GPgiBX,SAASZ,EAAQD,EAASH,GQvlBhC,GAAAW,GAAAmF,EAAAY,CAAA/F,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtB0G,EAEO1G,EAAQ,IAFfI,EAKOD,QAAUuG,GRimBX,SAAStG,EAAQD,EAASH,GStmBhC,GAAA2G,GAAAhG,EAAAmF,EAAA7E,EAAAY,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,YAAAtB,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtB2G,EAAA,WAOc,QAAAA,KACZzE,KAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,WACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,KACfnC,KAAC2C,MAAQ,2DACT3C,KAAC+C,oBAAsB,IACvB/C,KAACoD,wBAA0B,IAC3BpD,KAACuB,yBAEC,YAAa,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KTqoBjD,MS9oBFkD,GAAA1D,UAYAiB,aAAc,SAACM,EAAoBT,EAAYgC,GAC9C,GAAAnE,EACA,OADAA,GAAY,GAAAkE,GAAY5D,KAAC0D,gBAAiB1D,KAACmC,YAAa,GAAIN,GACtB,IAAnCS,EAAmBgC,QAAQ,MAA2C,KAA7BhC,EAAmBR,QAC9DpC,EAAMsE,UAAW,EACjBtE,EAAMwC,OAASI,EACf5C,EAAM6B,wBAA0B,GACzB7B,GAEiB,IAArBmC,EAAWC,QACbpC,EAAM6B,wBAA0BsC,EACzBnE,GAFR,QApBF+E,EAAA1D,UAwBAmC,YAAa,SAAChB,GACb,MAAoB,KAAjBA,EAAOJ,OACFrD,EAAM8B,QAAQ2B,EAAO+B,MAAM,mBACV,KAAjB/B,EAAOJ,OACPrD,EAAM8B,QAAQ2B,EAAO+B,MAAM,2BAE3B/B,ITgnBAuC,KSrpBV1F,EAwCe,GAAA0F,GAxCfhG,EAyCMqC,UAAU,IAAQ/B,EAzCxBb,EA4COD,QAAUc,GTsnBX,SAASb,EAAQD,EAASH,GUlqBhC,GAAA4G,GAAAjG,EAAAmF,EAAA5E,EAAAW,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,YAAAtB,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtB4G,EAAA,WAOc,QAAAA,KACZ1E,KAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,UACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,MACfnC,KAAC2C,MAAQ,kEACT3C,KAAC+C,oBAAsB,IACvB/C,KAACoD,wBAA0B,IAC3BpD,KAACuB,yBAEC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KVgsB/B,MUzsBFmD,GAAA3D,UAYAiB,aAAc,SAACM,EAAoBT,EAAYgC,GAC9C,GAAAnE,EACA,OADAA,GAAY,GAAAkE,GAAY5D,KAAC0D,gBAAiB1D,KAACmC,YAAa0B,EAAKhC,GACrC,IAArBA,EAAWC,QAAyB,MAAT+B,EACtBnE,EACO,MAAPmE,GAAmC,IAArBhC,EAAWC,QAChCpC,EAAMsE,UAAW,EACjBtE,EAAMwC,OAASI,EACf5C,EAAM6B,wBAA0B,GACzB7B,GAJH,QAhBNgF,EAAA3D,UAsBAmC,YAAa,SAAChB,GACb,MAAoB,KAAjBA,EAAOJ,OACFrD,EAAM8B,QAAQ2B,EAAO+B,MAAM,mBACV,IAAjB/B,EAAOJ,QACY,IAAvBI,EAAOoC,QAAQ,KACV7F,EAAM8B,QAAQ2B,EAAO+B,MAAM,2BAE5B/B,IV4qBAwC,KUhtBV1F,EAuCc,GAAA0F,GAvCdjG,EAwCMqC,UAAU,KAAS9B,EAxCzBd,EA2COD,QAAUe,GVkrBX,SAASd,EAAQD,EAASH,GW7tBhC,GAAA6G,GAAAlG,EAAAmF,EAAA1E,EAAAS,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,aXiuBGuE,KAAaA,SAAW,SAASM,GAAQ,IAAK,GAAIvD,GAAI,EAAGwD,EAAI7E,KAAK8B,OAAY+C,EAAJxD,EAAOA,IAAO,GAAIA,IAAKrB,OAAQA,KAAKqB,KAAOuD,EAAM,MAAOvD,EAAK,OAAO,GWjuBjJ5C,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtB6G,EAAA,WAOc,QAAAA,KACZ3E,KAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAG,OAAAR,EAAAK,KAAAG,OAAAH,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,YACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,MACfnC,KAAC2C,MAAQ,kCACT3C,KAACoD,wBAA0B,IAC3BpD,KAACuB,yBAA2B,IAAK,IAAK,IAAK,IAAK,IAAK,KACrDvB,KAAC8E,eAAiB,IAAK,IAAK,KX+wB3B,MWtxBFH,GAAA5D,UASAiB,aAAc,SAACM,EAAoBT,EAAYgC,GAC9C,GAAAnE,GAAAgC,CAEA,OAFAhC,GAAY,GAAAkE,GAAY5D,KAAC0D,gBAAiB1D,KAACmC,YAAa0B,EAAKhC,GAE3B,IAA/BS,EAAmBR,OACd,MACL+B,IAAQnC,EAAAG,EAAW,GAAXyC,EAAAjG,KAAiB2B,KAAC8E,cAAlBpD,IAAA,IACVhC,EAAMsE,UAAW,EACjBtE,EAAM6B,wBAA0B,GAChC7B,EAAMwC,OAASI,GAEf5C,EAAMsE,UAAW,EAEXtE,IArBRiF,EAAA5D,UAuBAZ,OAAQ,SAACT,EAAOS,GACf,GAAA6C,GAAAC,EAAAC,CAIA,QAJAF,EAAe,GAEfE,EAAclD,KAACkD,YAAYxD,EAAMwC,QAE1B/B,GAAP,IACM1B,GAAMkC,cACVqC,EAAe,IAAMtD,EAAMyC,YAAc,IACzCa,GAAgBE,EAAYC,KAAK,IAF7B,MADN,SAMEF,EAAYjD,KAACoD,wBACbJ,GAAgBE,EAAYC,KAAKF,GAEnC,MAAOD,IArCR2B,EAAA5D,UAuCAmC,YAAa,SAAChB,GACb,OAAOA,EAAOJ,QAAd,IACM,GACJ,MAAOrD,GAAM8B,QAAQ2B,EAAO+B,MAAM,mBAEpC,OAAQ/B,IX0uBAyC,KW7xBVzF,EAsDgB,GAAAyF,GAtDhBlG,EAuDMqC,UAAU,KAAS5B,EAvDzBhB,EA0DOD,QAAUiB,GXgvBX,SAAShB,EAAQD,EAASH,GY1yBhC,GAAAW,GAAAmF,EAAAmB,EAAAC,EAAArF,EAAA,SAAAC,EAAAC,GAAA,wBAAAD,GAAAE,MAAAD,EAAAE,aZ8yBGuE,KAAaA,SAAW,SAASM,GAAQ,IAAK,GAAIvD,GAAI,EAAGwD,EAAI7E,KAAK8B,OAAY+C,EAAJxD,EAAOA,IAAO,GAAIA,IAAKrB,OAAQA,KAAKqB,KAAOuD,EAAM,MAAOvD,EAAK,OAAO,GY9yBjJ5C,GAAQX,EAAQ,GAAhB8F,EACc9F,EAAQ,IADtBiH,EAAA,WAQc,QAAAA,KACZ/E,KAAAkD,YAAAvD,EAAAK,KAAAkD,YAAAlD,WAAAgC,aAAArC,EAAAK,KAAAgC,aAAAhC,WAACwD,YAAc,iBACfxD,KAAC0D,gBAAkB,MACnB1D,KAACmC,YAAc,KACfnC,KAAC2C,MAAQ,0RACT3C,KAACiF,YAAc,kKACfjF,KAACkF,cAGCC,cAAe,IACfC,cAAe,6CACfC,QAAS,0BACTlF,OAAQ,aAGRgF,cAAe,IACfC,cAAe,iCACfC,QAAS,0BACTlF,OAAQ,aAGRgF,cAAe,EAAG,IAClBC,cAAe,yDACfC,QAAS,qBACTlF,OAAQ,UAGRgF,cAAe,EAAG,IAClBC,cAAe,KACfC,QAAS,sBACTlF,OAAQ,UAGRgF,cAAe,IACfC,cAAe,qBACfC,QAAS,oBACTlF,OAAQ,UAGRgF,cAAe,GACfC,cAAe,WACfC,QAAS,iBACTlF,OAAQ,UAGRgF,cAAe,GACfC,cAAe,WACfC,QAAS,mBACTlF,OAAQ,aAGRgF,cAAe,IACfC,cAAe,sBACfC,QAAS,2BACTlF,OAAQ,aAGRgF,cAAe,IACfC,cAAe,UACfC,QAAS,yBACTlF,OAAQ,aAGRgF,cAAe,GACfC,cAAe,UACfC,QAAS,oBACTlF,OAAQ,UAGVH,KAAC+C,oBAAsB,IACvB/C,KAACoD,wBAA0B,IAC3BpD,KAACuB,yBACA,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC1C,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAC/C,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAC/C,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OACjD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,OAC/C,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,MAAO,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,OACnD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAC/C,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,QAAS,QAAS,OAAQ,OAClD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QACjD,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACjD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChD,OAAQ,OAA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","file":"phone-all-bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/@vtex/phone/script/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Phone, argentina, bolivia, brazil, canada, chile, colombia, ecuador, gbr, guatemala, mexico, paraguay, peru, uruguay, usa;\n\t\n\tPhone = __webpack_require__(1);\n\t\n\targentina = __webpack_require__(2);\n\t\n\tbolivia = __webpack_require__(3);\n\t\n\tbrazil = __webpack_require__(4);\n\t\n\tchile = __webpack_require__(5);\n\t\n\tcanada = __webpack_require__(6);\n\t\n\tcolombia = __webpack_require__(7);\n\t\n\tecuador = __webpack_require__(8);\n\t\n\tguatemala = __webpack_require__(9);\n\t\n\tgbr = __webpack_require__(10);\n\t\n\tmexico = __webpack_require__(11);\n\t\n\tparaguay = __webpack_require__(12);\n\t\n\tperu = __webpack_require__(13);\n\t\n\turuguay = __webpack_require__(14);\n\t\n\tusa = __webpack_require__(15);\n\t\n\twindow.vtex = window.vtex || {};\n\t\n\twindow.vtex.phone = Phone;\n\t\n\tmodule.exports = Phone;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Phone,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = (function() {\n\t  function Phone() {\n\t    this.getCountryCodeByNameAbbr = bind(this.getCountryCodeByNameAbbr, this);\n\t    this.getCountryCodeByName = bind(this.getCountryCodeByName, this);\n\t    this.format = bind(this.format, this);\n\t    this.testNDC = bind(this.testNDC, this);\n\t    this.testCountryCode = bind(this.testCountryCode, this);\n\t    this.validate = bind(this.validate, this);\n\t    this.compact = bind(this.compact, this);\n\t    this.normalize = bind(this.normalize, this);\n\t    this.getPhoneInternational = bind(this.getPhoneInternational, this);\n\t    this.getPhoneNational = bind(this.getPhoneNational, this);\n\t    this.INTERNATIONAL = 0;\n\t    this.NATIONAL = 1;\n\t    this.LOCAL = 2;\n\t    this.countries = {};\n\t  }\n\t\n\t  Phone.prototype.getPhoneNational = function(nationalNumber, givenCountryCode, givenNationalDestinationCode) {\n\t    var countryObj, foundNDC, i, len, nationalDestinationCode, ndcRegex, phoneNumber, ref, ref1, ref2, withoutNDC;\n\t    if (nationalNumber === null) {\n\t      return null;\n\t    }\n\t    nationalNumber = this.normalize(nationalNumber);\n\t    countryObj = this.countries[givenCountryCode];\n\t    if (!countryObj) {\n\t      return null;\n\t    }\n\t    if (givenNationalDestinationCode) {\n\t      nationalDestinationCode = givenNationalDestinationCode;\n\t      ref = this.testNDC(nationalDestinationCode, countryObj, nationalNumber), foundNDC = ref[0], ndcRegex = ref[1];\n\t    } else {\n\t      ref1 = countryObj.nationalDestinationCode;\n\t      for (i = 0, len = ref1.length; i < len; i++) {\n\t        nationalDestinationCode = ref1[i];\n\t        ref2 = this.testNDC(nationalDestinationCode, countryObj, nationalNumber), foundNDC = ref2[0], ndcRegex = ref2[1];\n\t        if (foundNDC === true) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    if (!foundNDC) {\n\t      return null;\n\t    }\n\t    withoutNDC = nationalNumber.replace(ndcRegex, \"\");\n\t    phoneNumber = countryObj.specialRules(nationalNumber, withoutNDC, nationalDestinationCode);\n\t    if (phoneNumber) {\n\t      phoneNumber.valid(true);\n\t      return phoneNumber;\n\t    } else {\n\t      return null;\n\t    }\n\t  };\n\t\n\t  Phone.prototype.getPhoneInternational = function(number, givenCountryCode, givenNationalDestinationCode) {\n\t    var countryCode, countryCodeRegex, countryObj, foundCountryCode, ref, ref1, ref2, withoutCountryCode;\n\t    if (number === null) {\n\t      return null;\n\t    }\n\t    number = this.normalize(number);\n\t    if (givenCountryCode) {\n\t      countryCode = givenCountryCode;\n\t      ref = this.testCountryCode(countryCode, number), foundCountryCode = ref[0], countryCodeRegex = ref[1];\n\t    } else {\n\t      ref1 = this.countries;\n\t      for (countryCode in ref1) {\n\t        countryObj = ref1[countryCode];\n\t        ref2 = this.testCountryCode(countryCode, number), foundCountryCode = ref2[0], countryCodeRegex = ref2[1];\n\t        if (foundCountryCode === true) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    if (!foundCountryCode) {\n\t      return null;\n\t    }\n\t    withoutCountryCode = number.replace(countryCodeRegex, \"\");\n\t    return this.getPhoneNational(withoutCountryCode, countryCode, givenNationalDestinationCode);\n\t  };\n\t\n\t  Phone.prototype.normalize = function(number) {\n\t    return number.replace(/\\ |\\(|\\)|\\-|\\.|[A-z]|\\+/g, \"\");\n\t  };\n\t\n\t  Phone.prototype.compact = function(array) {\n\t    var element, i, len, newArray;\n\t    newArray = [];\n\t    for (i = 0, len = array.length; i < len; i++) {\n\t      element = array[i];\n\t      if (element !== \"\") {\n\t        newArray.push(element);\n\t      }\n\t    }\n\t    return newArray;\n\t  };\n\t\n\t  Phone.prototype.validate = function(number, givenCountryCode) {\n\t    var countryCode, countryObj, ref;\n\t    if (number === null) {\n\t      return false;\n\t    }\n\t    number = this.normalize(number);\n\t    if (givenCountryCode) {\n\t      return this.countries[givenCountryCode].regex.test(number);\n\t    } else {\n\t      ref = this.countries;\n\t      for (countryCode in ref) {\n\t        countryObj = ref[countryCode];\n\t        if (countryObj.regex.test(number)) {\n\t          return true;\n\t        }\n\t      }\n\t      return false;\n\t    }\n\t  };\n\t\n\t  Phone.prototype.testCountryCode = function(countryCode, number) {\n\t    var countryCodeRegex;\n\t    countryCodeRegex = new RegExp(\"^\" + countryCode);\n\t    if (countryCodeRegex.test(number)) {\n\t      return [true, countryCodeRegex];\n\t    } else {\n\t      return [false, null];\n\t    }\n\t  };\n\t\n\t  Phone.prototype.testNDC = function(nationalDestinationCode, countryObj, number) {\n\t    var ndcPattern, ndcRegex;\n\t    ndcPattern = \"^(\" + countryObj.optionalTrunkPrefix + \"|)\" + nationalDestinationCode;\n\t    ndcRegex = new RegExp(ndcPattern);\n\t    if (ndcRegex.test(number)) {\n\t      return [true, ndcRegex];\n\t    } else {\n\t      return [false, null];\n\t    }\n\t  };\n\t\n\t  Phone.prototype.format = function(phone, format) {\n\t    var resultString, separator, splitNumber;\n\t    if (format == null) {\n\t      format = this.INTERNATIONAL;\n\t    }\n\t    if (phone === null) {\n\t      return null;\n\t    }\n\t    if (this.countries[phone.countryCode].format) {\n\t      return this.countries[phone.countryCode].format(phone, format);\n\t    }\n\t    resultString = \"\";\n\t    splitNumber = this.countries[phone.countryCode].splitNumber(phone.number);\n\t    switch (format) {\n\t      case this.INTERNATIONAL:\n\t        resultString = \"+\" + phone.countryCode + \" \";\n\t        if (phone.nationalDestinationCode) {\n\t          resultString += phone.nationalDestinationCode + \" \";\n\t        }\n\t        resultString += splitNumber.join(\" \");\n\t        break;\n\t      case this.NATIONAL:\n\t        if (phone.nationalDestinationCode) {\n\t          resultString += \"(\" + phone.nationalDestinationCode + \") \";\n\t        }\n\t        separator = this.countries[phone.countryCode].nationalNumberSeparator;\n\t        resultString += splitNumber.join(separator);\n\t        break;\n\t      case this.LOCAL:\n\t        separator = this.countries[phone.countryCode].nationalNumberSeparator;\n\t        resultString = splitNumber.join(separator);\n\t    }\n\t    return resultString;\n\t  };\n\t\n\t  Phone.prototype.getCountryCodeByName = function(name) {\n\t    var key, ref, value;\n\t    ref = this.countries;\n\t    for (key in ref) {\n\t      value = ref[key];\n\t      if (value.countryName === name) {\n\t        return value.countryCode;\n\t      }\n\t    }\n\t  };\n\t\n\t  Phone.prototype.getCountryCodeByNameAbbr = function(nameAbbr) {\n\t    var key, ref, value;\n\t    ref = this.countries;\n\t    for (key in ref) {\n\t      value = ref[key];\n\t      if (value.countryNameAbbr === nameAbbr) {\n\t        return value.countryCode;\n\t      }\n\t    }\n\t  };\n\t\n\t  return Phone;\n\t\n\t})();\n\t\n\tmodule.exports = new Phone();\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Argentina, Phone, PhoneNumber, argentina,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tArgentina = (function() {\n\t  function Argentina() {\n\t    this.format = bind(this.format, this);\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Argentina\";\n\t    this.countryNameAbbr = \"ARG\";\n\t    this.countryCode = '54';\n\t    this.regex = /^(?:(?:\\+|)54|)(?:0|)(?:(?:9(?:0|)(?:(?:11\\d{8})|(?:2(?:20|21|23|30|36|37|49|60|61|63|64|66|80|91|94|97|98|99)|3(?:36|41|42|43|45|45|48|51|53|58|62|64|70|76|79|80|81|83|85|87|88))\\d{7})|(?:2(?:2(?:02|21|23|24|25|26|27|29|41|42|43|44|45|46|52|54|55|57|61|62|64|65|66|67|68|71|72|73|74|81|83|84|85|86|91|92|96|97)|3(?:02|14|16|17|20|23|24|25|26|31|33|34|35|37|38|42|43|44|45|46|52|53|54|55|56|57|58|92|93|94|95|96)|4(?:73|74|75|77|78)|6(?:22|24|25|26|46|47|48|51|55|56|57|58)|9(?:01|02|03|20|21|22|23|24|25|26|27|28|29|31|32|33|34|35|36|40|42|45|46|48|52|53|54|62|63|64|66|72|82|83))|3(?:3(?:27|29|82|85|87|88)|4(?:00|01|02|04|05|06|07|08|09|35|36|37|38|42|44|45|46|47|54|55|56|58|60|62|63|64|65|66|67|68|69|71|72|76|82|83|87|89|91|92|93|96|97|98)|5(?:21|22|24|25|32|33|37|41|42|43|44|46|47|48|49|62|63|64|71|72|73|74|75|76|82|83|84|85)|7(?:11|15|16|18|21|25|31|34|35|41|43|51|54|55|56|57|58|72|73|74|75|77|81|82|86)|8(?:21|25|26|27|32|35|37|38|41|43|44|45|46|54|55|56|57|58|61|62|63|65|67|68|69|73|76|77|78|85|86|87|88|91|92|94))\\d{6}))|(?:(?:11(?:15\\d{8}|(?!15)\\d{8}))|(?:(?:2(?:20|21|23|30|36|37|49|60|61|63|64|66|80|91|94|97|98|99)|3(?:36|41|42|43|45|45|48|51|53|58|62|64|70|76|79|80|81|83|85|87|88))(?:15\\d{7}|(?!15)\\d{7}))|(?:2(?:2(?:02|21|23|24|25|26|27|29|41|42|43|44|45|46|52|54|55|57|61|62|64|65|66|67|68|71|72|73|74|81|83|84|85|86|91|92|96|97)|3(?:02|14|16|17|20|23|24|25|26|31|33|34|35|37|38|42|43|44|45|46|52|53|54|55|56|57|58|92|93|94|95|96)|4(?:73|74|75|77|78)|6(?:22|24|25|26|46|47|48|51|55|56|57|58)|9(?:01|02|03|20|21|22|23|24|25|26|27|28|29|31|32|33|34|35|36|40|42|45|46|48|52|53|54|62|63|64|66|72|82|83))|3(?:3(?:27|29|82|85|87|88)|4(?:00|01|02|04|05|06|07|08|09|35|36|37|38|42|44|45|46|47|54|55|56|58|60|62|63|64|65|66|67|68|69|71|72|76|82|83|87|89|91|92|93|96|97|98)|5(?:21|22|24|25|32|33|37|41|42|43|44|46|47|48|49|62|63|64|71|72|73|74|75|76|82|83|84|85)|7(?:11|15|16|18|21|25|31|34|35|41|43|51|54|55|56|57|58|72|73|74|75|77|81|82|86)|8(?:21|25|26|27|32|35|37|38|41|43|44|45|46|54|55|56|57|58|61|62|63|65|67|68|69|73|76|77|78|85|86|87|88|91|92|94)))(?:15\\d{6}|(?!15)\\d{6})))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = '-';\n\t    this.nationalDestinationCode = ['9', '11', '220', '221', '223', '230', '236', '237', '249', '260', '261', '263', '264', '266', '280', '291', '294', '297', '298', '299', '336', '341', '342', '343', '345', '345', '348', '351', '353', '358', '362', '364', '370', '376', '379', '380', '381', '383', '385', '387', '388', '2202', '2221', '2223', '2224', '2225', '2226', '2227', '2229', '2241', '2242', '2243', '2244', '2245', '2246', '2252', '2254', '2255', '2257', '2261', '2262', '2264', '2265', '2266', '2267', '2268', '2271', '2272', '2273', '2274', '2281', '2283', '2284', '2285', '2286', '2291', '2292', '2296', '2297', '2302', '2314', '2316', '2317', '2320', '2323', '2324', '2325', '2326', '2331', '2333', '2334', '2335', '2337', '2338', '2342', '2343', '2344', '2345', '2346', '2352', '2353', '2354', '2355', '2356', '2357', '2358', '2392', '2393', '2394', '2395', '2396', '2473', '2474', '2475', '2477', '2478', '2622', '2624', '2625', '2626', '2646', '2647', '2648', '2651', '2655', '2656', '2657', '2658', '2901', '2902', '2903', '2920', '2921', '2922', '2923', '2924', '2925', '2926', '2927', '2928', '2929', '2931', '2932', '2933', '2934', '2935', '2936', '2940', '2942', '2945', '2946', '2948', '2952', '2953', '2954', '2962', '2963', '2964', '2966', '2972', '2982', '2983', '3327', '3329', '3382', '3385', '3387', '3388', '3400', '3401', '3402', '3404', '3405', '3406', '3407', '3408', '3409', '3435', '3436', '3437', '3438', '3442', '3444', '3445', '3446', '3447', '3454', '3455', '3456', '3458', '3460', '3462', '3463', '3464', '3465', '3466', '3467', '3468', '3469', '3471', '3472', '3476', '3482', '3483', '3487', '3489', '3491', '3492', '3493', '3496', '3497', '3498', '3521', '3522', '3524', '3525', '3532', '3533', '3537', '3541', '3542', '3543', '3544', '3546', '3547', '3548', '3549', '3562', '3563', '3564', '3571', '3572', '3573', '3574', '3575', '3576', '3582', '3583', '3584', '3585', '3711', '3715', '3716', '3718', '3721', '3725', '3731', '3734', '3735', '3741', '3743', '3751', '3754', '3755', '3756', '3757', '3758', '3772', '3773', '3774', '3775', '3777', '3781', '3782', '3786', '3821', '3825', '3826', '3827', '3832', '3835', '3837', '3838', '3841', '3843', '3844', '3845', '3846', '3854', '3855', '3856', '3857', '3858', '3861', '3862', '3863', '3865', '3867', '3868', '3869', '3873', '3876', '3877', '3878', '3885', '3886', '3887', '3888', '3891', '3892', '3894'];\n\t  }\n\t\n\t  Argentina.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var foundNDC, i, len, nationalDestinationCode, ndcArray, ndcRegex, phone, ref;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if (ndc === '9') {\n\t      withoutCountryCode = withoutNDC;\n\t      ndcArray = this.nationalDestinationCode.slice(1);\n\t      for (i = 0, len = ndcArray.length; i < len; i++) {\n\t        nationalDestinationCode = ndcArray[i];\n\t        ref = Phone.testNDC(nationalDestinationCode, this, withoutCountryCode), foundNDC = ref[0], ndcRegex = ref[1];\n\t        if (foundNDC === true) {\n\t          break;\n\t        }\n\t      }\n\t      if (!foundNDC) {\n\t        return null;\n\t      }\n\t      withoutNDC = withoutCountryCode.replace(ndcRegex, \"\");\n\t      if (withoutNDC.length + nationalDestinationCode.length !== 10) {\n\t        return null;\n\t      }\n\t      phone.isMobile = true;\n\t      phone.nationalDestinationCode = nationalDestinationCode;\n\t      phone.number = withoutNDC;\n\t      return phone;\n\t    } else if (/^15/.test(withoutNDC) && (ndc.length + withoutNDC.length) === 12) {\n\t      withoutNDC = withoutNDC.replace(/^15/, \"\");\n\t      phone.isMobile = true;\n\t      phone.number = withoutNDC;\n\t      return phone;\n\t    } else if ((ndc.length + withoutNDC.length) === 10) {\n\t      return phone;\n\t    }\n\t  };\n\t\n\t  Argentina.prototype.splitNumber = function(number) {\n\t    switch (number.length) {\n\t      case 8:\n\t        return Phone.compact(number.split(/(\\d{4})(\\d{4})/));\n\t      case 7:\n\t        return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t      case 6:\n\t        return Phone.compact(number.split(/(\\d{2})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  Argentina.prototype.format = function(phone, format) {\n\t    var resultString, separator, splitNumber;\n\t    if (format == null) {\n\t      format = Phone.INTERNATIONAL;\n\t    }\n\t    resultString = \"\";\n\t    splitNumber = Phone.countries[phone.countryCode].splitNumber(phone.number);\n\t    switch (format) {\n\t      case Phone.INTERNATIONAL:\n\t        resultString = \"+\" + phone.countryCode + \" \";\n\t        if (phone.isMobile) {\n\t          resultString += \"9 \";\n\t        }\n\t        if (phone.nationalDestinationCode) {\n\t          resultString += phone.nationalDestinationCode + \" \";\n\t        }\n\t        resultString += splitNumber.join(\" \");\n\t        break;\n\t      case Phone.NATIONAL:\n\t        if (phone.nationalDestinationCode) {\n\t          resultString += \"(\" + phone.nationalDestinationCode + \") \";\n\t        }\n\t        separator = Phone.countries[phone.countryCode].nationalNumberSeparator;\n\t        if (phone.isMobile) {\n\t          resultString += \"15 \";\n\t        }\n\t        resultString += splitNumber.join(separator);\n\t        break;\n\t      case Phone.LOCAL:\n\t        separator = Phone.countries[phone.countryCode].nationalNumberSeparator;\n\t        resultString = splitNumber.join(separator);\n\t        break;\n\t      default:\n\t        resultString = \"\";\n\t    }\n\t    return resultString;\n\t  };\n\t\n\t  return Argentina;\n\t\n\t})();\n\t\n\targentina = new Argentina();\n\t\n\tPhone.countries['54'] = argentina;\n\t\n\tmodule.exports = argentina;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Bolivia, Phone, PhoneNumber, bolivia,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tBolivia = (function() {\n\t  function Bolivia() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Bolivia\";\n\t    this.countryNameAbbr = \"BOL\";\n\t    this.countryCode = '591';\n\t    this.regex = /^(?:(?:(?:\\+|)591)|)(?:0|)(?:(?:(?:[234]|)\\d{7}))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['2', '3', '4'];\n\t  }\n\t\n\t  Bolivia.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    return phone;\n\t  };\n\t\n\t  Bolivia.prototype.splitNumber = function(number) {\n\t    if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Bolivia;\n\t\n\t})();\n\t\n\tbolivia = new Bolivia();\n\t\n\tPhone.countries['591'] = bolivia;\n\t\n\tmodule.exports = bolivia;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Brazil, Phone, PhoneNumber, brazil,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tBrazil = (function() {\n\t  function Brazil() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Brazil\";\n\t    this.countryNameAbbr = \"BRA\";\n\t    this.countryCode = '55';\n\t    this.regex = /^(?:(?:(?:\\+|)(?:55|)|))(?:0|)(?:(?:(?:1[1-9]|2[12478]|3[1-8]|7[134579]|8[1-9]|9[1-9])(?:9\\d{8}|\\d{8}))|(?:(?:4[1-9]|5[1-5]|6[1-9])\\d{8}))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = '-';\n\t    this.nationalDestinationCode = ['11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24', '27', '28', '31', '32', '33', '34', '35', '36', '37', '38', '41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '52', '53', '54', '55', '61', '62', '63', '64', '65', '66', '67', '68', '69', '71', '72', '73', '74', '75', '77', '78', '79', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92', '93', '94', '95', '96', '97', '98', '99'];\n\t  }\n\t\n\t  Brazil.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var noNineDigitsNDC, noNineDigitsPattern, phone;\n\t    noNineDigitsNDC = ['41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '53', '54', '55', '61', '62', '63', '64', '65', '66', '67', '68', '69'];\n\t    noNineDigitsPattern = new RegExp(\"^(0|)(\" + noNineDigitsNDC.join(\"|\") + \")\");\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if (withoutNDC.length === 9 && withoutNDC.indexOf(\"9\") === 0 && !noNineDigitsPattern.test(ndc)) {\n\t      phone.isMobile = true;\n\t      return phone;\n\t    } else {\n\t      if (withoutNDC.length === 8) {\n\t        return phone;\n\t      }\n\t    }\n\t  };\n\t\n\t  Brazil.prototype.splitNumber = function(number) {\n\t    if (number.length === 8) {\n\t      return Phone.compact(number.split(/(\\d{4})(\\d{4})/));\n\t    } else if (number.length === 9 && number.indexOf(\"9\") === 0) {\n\t      return Phone.compact(number.split(/(\\d{5})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Brazil;\n\t\n\t})();\n\t\n\tbrazil = new Brazil();\n\t\n\tPhone.countries['55'] = brazil;\n\t\n\tmodule.exports = brazil;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Chile, Phone, PhoneNumber, chile,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tChile = (function() {\n\t  function Chile() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Chile\";\n\t    this.countryNameAbbr = \"CHL\";\n\t    this.countryCode = '56';\n\t    this.regex = /^(?:(?:\\+|)56|)(?:0|)(?:(?:(?:2|9)\\d{8})|(?:58\\d{7})|(?:(?:3[2345]|4[1235]|5[123578]|6[134578]|7[1235])\\d{6,7}))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['2', '32', '33', '34', '35', '41', '42', '43', '45', '51', '52', '53', '55', '57', '58', '61', '63', '64', '65', '67', '68', '71', '72', '73', '75', '9'];\n\t  }\n\t\n\t  Chile.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    switch (ndc) {\n\t      case '2':\n\t        if (withoutNDC.length === 8) {\n\t          return phone;\n\t        }\n\t        break;\n\t      case '9':\n\t        if (withoutNDC.length === 8) {\n\t          phone.isMobile = true;\n\t          phone.nationalDestinationCode = '';\n\t          phone.number = withoutCountryCode;\n\t          return phone;\n\t        }\n\t        break;\n\t      case '58':\n\t        if (withoutNDC.length === 7) {\n\t          return phone;\n\t        }\n\t        break;\n\t      default:\n\t        if (withoutNDC.length === 6 || withoutNDC.length === 7) {\n\t          return phone;\n\t        }\n\t    }\n\t  };\n\t\n\t  Chile.prototype.splitNumber = function(number) {\n\t    switch (number.length) {\n\t      case 9:\n\t        return Phone.compact(number.split(/(\\d{1})(\\d{4})(\\d{4})/));\n\t      case 8:\n\t        return Phone.compact(number.split(/(\\d{4})(\\d{4})/));\n\t      case 7:\n\t        return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t      case 6:\n\t        return Phone.compact(number.split(/(\\d{2})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Chile;\n\t\n\t})();\n\t\n\tchile = new Chile();\n\t\n\tPhone.countries['56'] = chile;\n\t\n\tmodule.exports = chile;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Phone, PhoneNumber, nanp;\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tnanp = __webpack_require__(19);\n\t\n\tmodule.exports = nanp;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Colombia, Phone, PhoneNumber, colombia,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tColombia = (function() {\n\t  function Colombia() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Colombia\";\n\t    this.countryNameAbbr = \"COL\";\n\t    this.countryCode = '57';\n\t    this.regex = /^(?:(?:\\+|)57|)(?:0|)(?:(?:[12345678]\\d{7})|(?:3\\d{9}))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['3(\\\\d{2})', '1', '2', '3', '4', '5', '6', '7', '8'];\n\t  }\n\t\n\t  Colombia.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, '', withoutNDC);\n\t    if (withoutCountryCode.indexOf('3') === 0 && withoutCountryCode.length === 10) {\n\t      phone.isMobile = true;\n\t      phone.number = withoutCountryCode;\n\t      phone.nationalDestinationCode = '';\n\t      return phone;\n\t    } else {\n\t      if (withoutNDC.length === 7) {\n\t        phone.nationalDestinationCode = ndc;\n\t        return phone;\n\t      }\n\t    }\n\t  };\n\t\n\t  Colombia.prototype.splitNumber = function(number) {\n\t    if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    } else if (number.length === 10) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{3})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Colombia;\n\t\n\t})();\n\t\n\tcolombia = new Colombia();\n\t\n\tPhone.countries['57'] = colombia;\n\t\n\tmodule.exports = colombia;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Ecuador, Phone, PhoneNumber, ecuador,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tEcuador = (function() {\n\t  function Ecuador() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Ecuador\";\n\t    this.countryNameAbbr = \"ECU\";\n\t    this.countryCode = '593';\n\t    this.regex = /^(?:(?:(?:\\+|)593)|)(?:0|)(?:(?:(?:[234567])\\d{7})|(?:9\\d{8}))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['2', '3', '4', '5', '6', '7', '9'];\n\t  }\n\t\n\t  Ecuador.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if (withoutNDC.length === 7 && ndc !== '9') {\n\t      return phone;\n\t    } else if (ndc === '9' && withoutNDC.length === 8) {\n\t      phone.isMobile = true;\n\t      phone.number = withoutCountryCode;\n\t      phone.nationalDestinationCode = '';\n\t      return phone;\n\t    }\n\t  };\n\t\n\t  Ecuador.prototype.splitNumber = function(number) {\n\t    if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    } else if (number.length === 9) {\n\t      if (number.indexOf(\"9\") === 0) {\n\t        return Phone.compact(number.split(/(\\d{2})(\\d{3})(\\d{4})/));\n\t      }\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Ecuador;\n\t\n\t})();\n\t\n\tecuador = new Ecuador();\n\t\n\tPhone.countries['593'] = ecuador;\n\t\n\tmodule.exports = ecuador;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Guatemala, Phone, PhoneNumber, guatemala,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n\t  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tGuatemala = (function() {\n\t  function Guatemala() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.format = bind(this.format, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Guatemala\";\n\t    this.countryNameAbbr = \"GTM\";\n\t    this.countryCode = '502';\n\t    this.regex = /^(?:(?:\\+|)502|)(?:[2-7]\\d{7})$/;\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['2', '6', '7', '3', '4', '5'];\n\t    this.mobileNumbers = ['3', '4', '5'];\n\t  }\n\t\n\t  Guatemala.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone, ref;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if (withoutCountryCode.length !== 8) {\n\t      return null;\n\t    }\n\t    if (ndc && (ref = withoutNDC[0], indexOf.call(this.mobileNumbers, ref) >= 0)) {\n\t      phone.isMobile = true;\n\t      phone.nationalDestinationCode = '';\n\t      phone.number = withoutCountryCode;\n\t    } else {\n\t      phone.isMobile = false;\n\t    }\n\t    return phone;\n\t  };\n\t\n\t  Guatemala.prototype.format = function(phone, format) {\n\t    var resultString, separator, splitNumber;\n\t    resultString = \"\";\n\t    splitNumber = this.splitNumber(phone.number);\n\t    switch (format) {\n\t      case Phone.INTERNATIONAL:\n\t        resultString = \"+\" + phone.countryCode + \" \";\n\t        resultString += splitNumber.join(\" \");\n\t        break;\n\t      default:\n\t        separator = this.nationalNumberSeparator;\n\t        resultString += splitNumber.join(separator);\n\t    }\n\t    return resultString;\n\t  };\n\t\n\t  Guatemala.prototype.splitNumber = function(number) {\n\t    switch (number.length) {\n\t      case 8:\n\t        return Phone.compact(number.split(/(\\d{4})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Guatemala;\n\t\n\t})();\n\t\n\tguatemala = new Guatemala();\n\t\n\tPhone.countries['502'] = guatemala;\n\t\n\tmodule.exports = guatemala;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Phone, PhoneNumber, UnitedKingdom, uk,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n\t  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tUnitedKingdom = (function() {\n\t  function UnitedKingdom() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"United Kingdom\";\n\t    this.countryNameAbbr = \"GBR\";\n\t    this.countryCode = '44';\n\t    this.regex = /^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/;\n\t    this.mobileRegex = /^7(?:[1-4]\\d\\d|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|624|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[04-9]\\d|1[02-9]|2[0-35-9]|3[0-689]))\\d{6}$/;\n\t    this.splitRegexs = [\n\t      {\n\t        validLengths: [10],\n\t        leadingDigits: /^(?:2|5[56]|7(?:0|6(?:[013-9]|2[0-35-9])))/,\n\t        pattern: /^(\\d{2})(\\d{4})(\\d{4})$/,\n\t        format: \"$1 $2 $3\"\n\t      }, {\n\t        validLengths: [10],\n\t        leadingDigits: /^(?:1(?:1|\\d1)|3[0347]|9[018])/,\n\t        pattern: /^(\\d{3})(\\d{3})(\\d{4})$/,\n\t        format: \"$1 $2 $3\"\n\t      }, {\n\t        validLengths: [9, 10],\n\t        leadingDigits: /^(?:1(?:3873|5(?:242|39[456])|697[347]|768[347]|9467))/,\n\t        pattern: /^(\\d{5})(\\d{4,5})$/,\n\t        format: \"$1 $2\"\n\t      }, {\n\t        validLengths: [9, 10],\n\t        leadingDigits: /^1/,\n\t        pattern: /^(1\\d{3})(\\d{5,6})$/,\n\t        format: \"$1 $2\"\n\t      }, {\n\t        validLengths: [10],\n\t        leadingDigits: /^7(?:[1-5789]|624)/,\n\t        pattern: /^(7\\d{3})(\\d{6})$/,\n\t        format: \"$1 $2\"\n\t      }, {\n\t        validLengths: [7],\n\t        leadingDigits: /^8001111/,\n\t        pattern: /^(800)(\\d{4})$/,\n\t        format: \"$1 $2\"\n\t      }, {\n\t        validLengths: [7],\n\t        leadingDigits: /^84546\\d/,\n\t        pattern: /^(845)(46)(4\\d)$/,\n\t        format: \"$1 $2 $3\"\n\t      }, {\n\t        validLengths: [10],\n\t        leadingDigits: /^8(?:4[2-5]|7[0-3])/,\n\t        pattern: /^(8\\d{2})(\\d{3})(\\d{4})$/,\n\t        format: \"$1 $2 $3\"\n\t      }, {\n\t        validLengths: [10],\n\t        leadingDigits: /^80[08]/,\n\t        pattern: /^(80\\d)(\\d{3})(\\d{4})$/,\n\t        format: \"$1 $2 $3\"\n\t      }, {\n\t        validLengths: [9],\n\t        leadingDigits: /^[58]00/,\n\t        pattern: /^([58]00)(\\d{6})$/,\n\t        format: \"$1 $2\"\n\t      }\n\t    ];\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = [\"20\", \"23\", \"24\", \"28\", \"29\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"1200\", \"1202\", \"1204\", \"1205\", \"1206\", \"1207\", \"1208\", \"1209\", \"121\", \"1223\", \"1224\", \"1225\", \"1226\", \"1227\", \"1228\", \"1229\", \"1233\", \"1234\", \"1235\", \"1236\", \"1237\", \"1239\", \"1241\", \"1242\", \"1243\", \"1244\", \"1245\", \"1246\", \"1248\", \"1249\", \"1250\", \"1252\", \"1253\", \"1254\", \"1255\", \"1256\", \"1257\", \"1258\", \"1259\", \"1260\", \"1261\", \"1262\", \"1263\", \"1264\", \"1267\", \"1268\", \"1269\", \"1270\", \"1271\", \"1273\", \"1274\", \"1275\", \"1276\", \"1277\", \"1278\", \"1279\", \"1280\", \"1282\", \"1283\", \"1284\", \"1285\", \"1286\", \"1287\", \"1288\", \"1289\", \"1290\", \"1291\", \"1292\", \"1293\", \"1294\", \"1295\", \"1296\", \"1297\", \"1298\", \"1299\", \"1300\", \"1301\", \"1302\", \"1303\", \"1304\", \"1305\", \"1306\", \"1307\", \"1308\", \"1309\", \"131\", \"1320\", \"1322\", \"1323\", \"1324\", \"1325\", \"1326\", \"1327\", \"1328\", \"1329\", \"1330\", \"1332\", \"1333\", \"1334\", \"1335\", \"1337\", \"1339\", \"1340\", \"1341\", \"1342\", \"1343\", \"1344\", \"1346\", \"1347\", \"1348\", \"1349\", \"1350\", \"1352\", \"1353\", \"1354\", \"1355\", \"1356\", \"1357\", \"1358\", \"1359\", \"1360\", \"1361\", \"1362\", \"1363\", \"1364\", \"1366\", \"1367\", \"1368\", \"1369\", \"1371\", \"1372\", \"1373\", \"1375\", \"1376\", \"1377\", \"1379\", \"1380\", \"1381\", \"1382\", \"1383\", \"1384\", \"1386\", \"1387\", \"13873\", \"1388\", \"1389\", \"1392\", \"1394\", \"1395\", \"1397\", \"1398\", \"1400\", \"1403\", \"1404\", \"1405\", \"1406\", \"1407\", \"1408\", \"1409\", \"141\", \"1420\", \"1422\", \"1423\", \"1424\", \"1425\", \"1427\", \"1428\", \"1429\", \"1430\", \"1431\", \"1432\", \"1433\", \"1434\", \"1435\", \"1436\", \"1437\", \"1438\", \"1439\", \"1440\", \"1442\", \"1443\", \"1444\", \"1445\", \"1446\", \"1449\", \"1450\", \"1451\", \"1452\", \"1453\", \"1454\", \"1455\", \"1456\", \"1457\", \"1458\", \"1460\", \"1461\", \"1462\", \"1463\", \"1464\", \"1465\", \"1466\", \"1467\", \"1469\", \"1470\", \"1471\", \"1472\", \"1473\", \"1474\", \"1475\", \"1476\", \"1477\", \"1478\", \"1479\", \"1480\", \"1481\", \"1482\", \"1483\", \"1484\", \"1485\", \"1487\", \"1488\", \"1489\", \"1490\", \"1491\", \"1492\", \"1493\", \"1494\", \"1495\", \"1496\", \"1497\", \"1499\", \"1501\", \"1502\", \"1503\", \"1505\", \"1506\", \"1507\", \"1508\", \"1509\", \"151\", \"1520\", \"1522\", \"1524\", \"15242\", \"1525\", \"1526\", \"1527\", \"1528\", \"1529\", \"1530\", \"1531\", \"1534\", \"1535\", \"1536\", \"1538\", \"1539\", \"15394\", \"15395\", \"15396\", \"1540\", \"1542\", \"1543\", \"1544\", \"1545\", \"1546\", \"1547\", \"1548\", \"1549\", \"1550\", \"1553\", \"1554\", \"1555\", \"1556\", \"1557\", \"1558\", \"1559\", \"1560\", \"1561\", \"1562\", \"1563\", \"1564\", \"1565\", \"1566\", \"1567\", \"1568\", \"1569\", \"1570\", \"1571\", \"1572\", \"1573\", \"1575\", \"1576\", \"1577\", \"1578\", \"1579\", \"1580\", \"1581\", \"1582\", \"1583\", \"1584\", \"1586\", \"1588\", \"1590\", \"1591\", \"1592\", \"1593\", \"1594\", \"1595\", \"1597\", \"1598\", \"1599\", \"1600\", \"1603\", \"1604\", \"1606\", \"1608\", \"1609\", \"161\", \"1620\", \"1621\", \"1622\", \"1623\", \"1624\", \"1625\", \"1626\", \"1628\", \"1629\", \"1630\", \"1631\", \"1633\", \"1634\", \"1635\", \"1636\", \"1637\", \"1638\", \"1639\", \"1641\", \"1642\", \"1643\", \"1644\", \"1646\", \"1647\", \"1650\", \"1651\", \"1652\", \"1653\", \"1654\", \"1655\", \"1656\", \"1659\", \"1661\", \"1663\", \"1664\", \"1665\", \"1666\", \"1667\", \"1668\", \"1669\", \"1670\", \"1671\", \"1672\", \"1673\", \"1674\", \"1675\", \"1676\", \"1677\", \"1678\", \"1680\", \"1681\", \"1683\", \"1684\", \"1685\", \"1686\", \"1687\", \"1688\", \"1689\", \"1690\", \"1691\", \"1692\", \"1694\", \"1695\", \"1697\", \"16973\", \"16974\", \"1698\", \"1700\", \"1702\", \"1704\", \"1706\", \"1707\", \"1708\", \"1709\", \"1720\", \"1721\", \"1722\", \"1723\", \"1724\", \"1725\", \"1726\", \"1727\", \"1728\", \"1729\", \"1730\", \"1732\", \"1733\", \"1736\", \"1737\", \"1738\", \"1740\", \"1743\", \"1744\", \"1745\", \"1746\", \"1747\", \"1748\", \"1749\", \"1750\", \"1751\", \"1752\", \"1753\", \"1754\", \"1756\", \"1757\", \"1758\", \"1759\", \"1760\", \"1761\", \"1763\", \"1764\", \"1765\", \"1766\", \"1767\", \"1768\", \"17683\", \"17684\", \"17687\", \"1769\", \"1770\", \"1771\", \"1772\", \"1773\", \"1775\", \"1776\", \"1777\", \"1778\", \"1779\", \"1780\", \"1782\", \"1784\", \"1785\", \"1786\", \"1787\", \"1788\", \"1789\", \"1790\", \"1792\", \"1793\", \"1794\", \"1795\", \"1796\", \"1797\", \"1798\", \"1799\", \"1803\", \"1805\", \"1806\", \"1807\", \"1808\", \"1809\", \"1821\", \"1822\", \"1823\", \"1824\", \"1825\", \"1827\", \"1828\", \"1829\", \"1830\", \"1832\", \"1833\", \"1834\", \"1835\", \"1837\", \"1838\", \"1840\", \"1841\", \"1842\", \"1843\", \"1844\", \"1845\", \"1847\", \"1848\", \"1851\", \"1852\", \"1854\", \"1855\", \"1856\", \"1857\", \"1858\", \"1859\", \"1862\", \"1863\", \"1864\", \"1865\", \"1866\", \"1869\", \"1870\", \"1871\", \"1872\", \"1873\", \"1874\", \"1875\", \"1876\", \"1877\", \"1878\", \"1879\", \"1880\", \"1882\", \"1883\", \"1884\", \"1885\", \"1886\", \"1887\", \"1888\", \"1889\", \"1890\", \"1892\", \"1895\", \"1896\", \"1899\", \"1900\", \"1902\", \"1903\", \"1904\", \"1905\", \"1908\", \"1909\", \"191\", \"1920\", \"1922\", \"1923\", \"1924\", \"1925\", \"1926\", \"1928\", \"1929\", \"1931\", \"1932\", \"1933\", \"1934\", \"1935\", \"1937\", \"1938\", \"1939\", \"1942\", \"1943\", \"1944\", \"1945\", \"1946\", \"19467\", \"1947\", \"1948\", \"1949\", \"1950\", \"1951\", \"1952\", \"1953\", \"1954\", \"1955\", \"1957\", \"1959\", \"1962\", \"1963\", \"1964\", \"1967\", \"1968\", \"1969\", \"1970\", \"1971\", \"1972\", \"1974\", \"1975\", \"1977\", \"1978\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\", \"1989\", \"1992\", \"1993\", \"1994\", \"1995\", \"1997\"];\n\t  }\n\t\n\t  UnitedKingdom.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if (withoutNDC.length === 10 && this.mobileRegex.test(withoutNDC)) {\n\t      phone.isMobile = true;\n\t    }\n\t    return phone;\n\t  };\n\t\n\t  UnitedKingdom.prototype.splitNumber = function(number) {\n\t    var findSplitter, splitter;\n\t    findSplitter = (function() {\n\t      return function(nmbr, splitRegexs) {\n\t        var i, len, potentialSplitGrp, ref;\n\t        for (i = 0, len = splitRegexs.length; i < len; i++) {\n\t          potentialSplitGrp = splitRegexs[i];\n\t          if ((ref = nmbr.length, indexOf.call(potentialSplitGrp.validLengths, ref) >= 0) && potentialSplitGrp.leadingDigits.test(nmbr)) {\n\t            return potentialSplitGrp;\n\t          }\n\t        }\n\t      };\n\t    })();\n\t    splitter = findSplitter(number, this.splitRegexs);\n\t    if (splitter) {\n\t      return Phone.compact(number.split(splitter.pattern));\n\t    } else {\n\t      return [number];\n\t    }\n\t  };\n\t\n\t  return UnitedKingdom;\n\t\n\t})();\n\t\n\tuk = new UnitedKingdom();\n\t\n\tPhone.countries['44'] = uk;\n\t\n\tmodule.exports = uk;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Mexico, Phone, PhoneNumber, mexico,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tMexico = (function() {\n\t  function Mexico() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Mexico\";\n\t    this.countryNameAbbr = \"MEX\";\n\t    this.countryCode = '52';\n\t    this.regex = /^(?:(?:\\+|)52|)(?:(?:33|55|81)\\d{8}|(?:22[2-9]|23[1-35-8]|24[13-9]|27[1-9]|28[1-578]|29[467]|31[1-9]|32[1-9]|34[1-9]|35[1-9]|37[1-9]|38[1-9]|39[1-5]|41[1-5]|41[7-9|42[1-9]|43[1-8]|44[1-57-9]|45[1-9]|46[1-9]|47[1-8]|48[1-35-9]|49[2-689]|588|59[1-79]|61[2-68]|62[1-9]|63[1-9]|64[1-9]|65[1-3689]|66[12457-9]|67[1-7]|68[67]|69[4-8]|71[1-9]|72[1-9]|73[1-9]|74[1-9]|75[13-9]|76[1-9]|77[1-9]|78[1-69]|79[17]|82[13-9]|83[1-6]|84[124-6]|86[1246-9]|87[1-378]|89[12479]|91[346-9]|92[1-4]|93[2-46-8]|95[1348]|96[1-9]|97[12]|98[1-7]|99[1-9])\\d{7})$/;\n\t    this.optionalTrunkPrefix = '';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = [\"33\", \"55\", \"81\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"231\", \"232\", \"233\", \"235\", \"236\", \"237\", \"238\", \"241\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"278\", \"279\", \"281\", \"282\", \"283\", \"284\", \"285\", \"287\", \"288\", \"294\", \"296\", \"297\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"391\", \"392\", \"393\", \"394\", \"395\", \"411\", \"412\", \"413\", \"414\", \"415\", \"417\", \"418\", \"419\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"441\", \"442\", \"443\", \"444\", \"445\", \"447\", \"448\", \"449\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"481\", \"482\", \"483\", \"485\", \"486\", \"487\", \"488\", \"489\", \"492\", \"493\", \"494\", \"495\", \"496\", \"498\", \"499\", \"588\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"599\", \"612\", \"613\", \"614\", \"615\", \"616\", \"618\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"651\", \"652\", \"653\", \"656\", \"658\", \"659\", \"661\", \"662\", \"664\", \"665\", \"667\", \"668\", \"669\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"686\", \"687\", \"694\", \"695\", \"696\", \"697\", \"698\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"751\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"789\", \"791\", \"797\", \"821\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"841\", \"842\", \"844\", \"845\", \"846\", \"861\", \"862\", \"864\", \"866\", \"867\", \"868\", \"869\", \"871\", \"872\", \"873\", \"877\", \"878\", \"891\", \"892\", \"894\", \"897\", \"899\", \"913\", \"914\", \"916\", \"917\", \"918\", \"919\", \"921\", \"922\", \"923\", \"924\", \"932\", \"933\", \"934\", \"936\", \"937\", \"938\", \"951\", \"953\", \"954\", \"958\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"971\", \"972\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\"];\n\t  }\n\t\n\t  Mexico.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    if (withoutNDC.length === 7 || withoutNDC.length === 8) {\n\t      return new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    }\n\t  };\n\t\n\t  Mexico.prototype.splitNumber = function(number) {\n\t    if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    } else if (number.length === 8) {\n\t      return Phone.compact(number.split(/(\\d{4})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Mexico;\n\t\n\t})();\n\t\n\tmexico = new Mexico();\n\t\n\tPhone.countries['52'] = mexico;\n\t\n\tmodule.exports = mexico;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Paraguay, Phone, PhoneNumber, paraguay,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tParaguay = (function() {\n\t  function Paraguay() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Paraguay\";\n\t    this.countryNameAbbr = \"PRY\";\n\t    this.countryCode = '595';\n\t    this.regex = /^(?:(?:\\+|)595|)(?:0|)(?:(?:(?:21|3[289]|4[14-8]|61|7[123]|8[13])(?:\\d{7}))|(?:(?:21|3[289]|4[14-8]|61|7[123]|8[13]|2(?:2[04568]|7[15]|9[1-5])|3(?:18|3[0167]|4[2357]|5[01]|60|70)|4(?:18|2[045]|3[12]|5[13]|64|71|9[1-47])|5(?:1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[02-4]|7[0-3]|80)|6(?:3[1-3]|44|60|7[1-46-8])|7(?:17|4[0-4]|50|6[2-578]|7[05]|8[0-8]|90)|858|9(?:6[12]|7[1-356]|8[1-5]|9[1-35]))(?:\\d{6})))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['21', '32', '38', '39', '41', '44', '46', '47', '48', '61', '71', '72', '73', '81', '83', '220', '224', '225', '226', '228', '271', '275', '291', '292', '293', '294', '295', '318', '330', '331', '336', '337', '342', '343', '345', '347', '350', '351', '360', '370', '418', '420', '424', '425', '431', '432', '451', '453', '464', '471', '491', '492', '493', '494', '497', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '552', '553', '554', '570', '571', '572', '573', '580', '631', '632', '633', '644', '660', '671', '672', '673', '674', '676', '677', '678', '717', '740', '741', '742', '743', '744', '750', '762', '763', '764', '765', '767', '768', '770', '775', '780', '781', '782', '783', '784', '785', '786', '787', '788', '790', '858', '961', '962', '971', '972', '973', '975', '976', '981', '982', '983', '984', '985', '991', '992', '993', '995'];\n\t  }\n\t\n\t  Paraguay.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if (ndc.length === 3 && ndc[0] === '9') {\n\t      phone.isMobile = true;\n\t    }\n\t    return phone;\n\t  };\n\t\n\t  Paraguay.prototype.splitNumber = function(number) {\n\t    if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    } else {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{3})/));\n\t    }\n\t  };\n\t\n\t  return Paraguay;\n\t\n\t})();\n\t\n\tparaguay = new Paraguay();\n\t\n\tPhone.countries['595'] = paraguay;\n\t\n\tmodule.exports = paraguay;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Peru, Phone, PhoneNumber, peru,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tPeru = (function() {\n\t  function Peru() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Peru\";\n\t    this.countryNameAbbr = \"PER\";\n\t    this.countryCode = '51';\n\t    this.regex = /^(?:(?:\\+|)51|)(?:0|)(?:(?:1\\d{7})|(?:9\\d{8})|(?:(?:4[1-4]|5[1-46]|6[1-7]|7[2346]|8[234])\\d{6}))$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['1', '9', '41', '42', '43', '44', '51', '52', '53', '54', '56', '61', '62', '63', '64', '65', '66', '67', '72', '73', '74', '76', '82', '83', '84'];\n\t  }\n\t\n\t  Peru.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if (ndc === '1' && withoutNDC.length === 7) {\n\t      return phone;\n\t    } else if (ndc === '9' && withoutNDC.length === 8) {\n\t      phone.isMobile = true;\n\t      phone.nationalDestinationCode = '';\n\t      phone.number = withoutCountryCode;\n\t      return phone;\n\t    } else if (ndc.length === 2 && withoutNDC.length === 6) {\n\t      return phone;\n\t    }\n\t  };\n\t\n\t  Peru.prototype.splitNumber = function(number) {\n\t    if (number.length === 6) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{3})/));\n\t    } else if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    } else if (number.length === 9) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{3})(\\d{3})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Peru;\n\t\n\t})();\n\t\n\tperu = new Peru();\n\t\n\tPhone.countries['51'] = peru;\n\t\n\tmodule.exports = peru;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Phone, PhoneNumber, Uruguay, uruguay,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tUruguay = (function() {\n\t  function Uruguay() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"Uruguay\";\n\t    this.countryNameAbbr = \"URY\";\n\t    this.countryCode = '598';\n\t    this.regex = /^(?:(?:\\+|)598|)(?:0|)(?:[249]\\d{7})$/;\n\t    this.optionalTrunkPrefix = '0';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.nationalDestinationCode = ['2', '4', '9'];\n\t  }\n\t\n\t  Uruguay.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    var phone;\n\t    phone = new PhoneNumber(this.countryNameAbbr, this.countryCode, ndc, withoutNDC);\n\t    if ((ndc.length + withoutNDC.length) === 8) {\n\t      if (ndc === '9') {\n\t        phone.isMobile = true;\n\t      }\n\t      phone.nationalDestinationCode = '';\n\t      phone.number = withoutCountryCode;\n\t      return phone;\n\t    }\n\t  };\n\t\n\t  Uruguay.prototype.splitNumber = function(number) {\n\t    if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    } else if (number.length === 8) {\n\t      return Phone.compact(number.split(/(\\d{4})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return Uruguay;\n\t\n\t})();\n\t\n\turuguay = new Uruguay();\n\t\n\tPhone.countries['598'] = uruguay;\n\t\n\tmodule.exports = uruguay;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Phone, PhoneNumber, nanp;\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tnanp = __webpack_require__(19);\n\t\n\tmodule.exports = nanp;\n\n\n/***/ },\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar PhoneNumber,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\t\n\tPhoneNumber = (function() {\n\t  function PhoneNumber(countryNameAbbr, countryCode, nationalDestinationCode, number) {\n\t    this.valid = bind(this.valid, this);\n\t    this.countryNameAbbr = countryNameAbbr;\n\t    this.countryCode = countryCode;\n\t    this.nationalDestinationCode = nationalDestinationCode;\n\t    this.number = number;\n\t    this.isMobile = null;\n\t  }\n\t\n\t  PhoneNumber.prototype.valid = function(isValid) {\n\t    return this.valid = isValid;\n\t  };\n\t\n\t  return PhoneNumber;\n\t\n\t})();\n\t\n\tmodule.exports = PhoneNumber;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar NANP, Phone, PhoneNumber, nanp,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n\t  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\t\n\tPhone = __webpack_require__(1);\n\t\n\tPhoneNumber = __webpack_require__(18);\n\t\n\tNANP = (function() {\n\t  function NANP() {\n\t    this.splitNumber = bind(this.splitNumber, this);\n\t    this.specialRules = bind(this.specialRules, this);\n\t    this.countryName = \"NANP\";\n\t    this.countryNameAbbr = \"USA/CAN\";\n\t    this.countryCode = '1';\n\t    this.regex = /^(?:(?:(?:\\+|)(?:1|))|)(?:1|)(?:2(?:0[1-9]|1[02-9]|2[4-9]|3[1469]|4[089]|5[01-46]|6[0279]|7[0468]|8[139])|3(?:0[1-9]|1[02-9]|2[0235]|3[014679]|4[137]|5[12]|6[01459]|8[056])|4(?:0[1-9]|1[02-9]|2[345]|3[0-24578]|4[023578]|50|6[49]|7[0589]|8[04]|50[1-57-9])|5(?:06|1[02-5-89]|20|3[014]|4[01]|5[179]|6[1-47]|7[013-59]|8[01567])|6(?:0[1-9]|1[0234-9]|2[036-8]|3[0169]|4[167]|5[0179]|6[01279]|7[89]|8[129])|7(?:0[1-9]|1[2-9]|2[047]|3[01247]|4[07]|5[247]|6[02-59]|7[02-589]|8[0156])|8(?:0[1-8]|1[0-9]|28|3[0-25]|4[3578]|5[06-9]|6[02-57]|7[0238])|9(?:0[1-9]|1[02-9]|2[0578]|3[15-8]|4[0179]|5[124679]|7[0-3589]|8[045]|89))\\d{7}$/;\n\t    this.optionalTrunkPrefix = '1';\n\t    this.nationalNumberSeparator = ' ';\n\t    this.usaNationalDestinationCode = ['201', '202', '203', '205', '206', '207', '208', '209', '209', '210', '212', '213', '214', '215', '216', '217', '218', '219', '224', '225', '227', '228', '229', '231', '234', '239', '240', '248', '251', '252', '253', '254', '256', '260', '262', '267', '269', '270', '274', '276', '278', '281', '283', '301', '302', '303', '304', '305', '307', '308', '309', '310', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '323', '325', '330', '331', '334', '336', '337', '339', '341', '347', '351', '352', '360', '361', '364', '369', '380', '385', '386', '401', '402', '404', '405', '406', '407', '408', '409', '410', '412', '413', '414', '415', '417', '419', '423', '424', '425', '430', '432', '434', '435', '440', '442', '443', '445', '447', '458', '464', '469', '470', '475', '478', '479', '480', '484', '501', '502', '503', '504', '505', '507', '508', '509', '510', '512', '513', '515', '516', '517', '518', '520', '530', '531', '534', '540', '541', '551', '557', '559', '561', '562', '563', '564', '567', '570', '571', '573', '574', '575', '580', '585', '586', '601', '602', '603', '605', '606', '607', '608', '609', '610', '612', '614', '615', '616', '617', '618', '619', '620', '623', '626', '627', '628', '630', '631', '636', '641', '646', '650', '651', '657', '659', '660', '661', '662', '667', '669', '678', '679', '681', '682', '689', '701', '702', '703', '704', '706', '707', '708', '712', '713', '714', '715', '716', '717', '718', '719', '720', '724', '727', '730', '731', '732', '734', '737', '740', '747', '752', '754', '757', '760', '762', '763', '764', '765', '769', '770', '772', '773', '774', '775', '779', '781', '785', '786', '801', '802', '803', '804', '805', '806', '808', '810', '812', '813', '814', '815', '816', '817', '818', '828', '830', '831', '832', '835', '843', '845', '847', '848', '850', '856', '857', '858', '859', '860', '862', '863', '864', '865', '870', '872', '878', '901', '903', '904', '906', '907', '908', '909', '910', '912', '913', '914', '915', '916', '917', '918', '919', '920', '925', '927', '928', '931', '935', '936', '937', '938', '940', '941', '947', '949', '951', '952', '954', '956', '957', '959', '970', '971', '972', '973', '975', '978', '979', '980', '984', '985', '989'];\n\t    this.canadaNationalDestinationCode = ['204', '226', '236', '249', '250', '289', '306', '343', '365', '403', '416', '418', '431', '437', '438', '450', '506', '514', '519', '579', '581', '587', '604', '613', '639', '647', '705', '709', '778', '780', '807', '819', '867', '873', '902', '905'];\n\t    this.nationalDestinationCode = this.usaNationalDestinationCode.concat(this.canadaNationalDestinationCode);\n\t  }\n\t\n\t  NANP.prototype.specialRules = function(withoutCountryCode, withoutNDC, ndc) {\n\t    if (withoutNDC.length === 7) {\n\t      if (indexOf.call(this.canadaNationalDestinationCode, ndc) >= 0) {\n\t        return new PhoneNumber('CAN', this.countryCode, ndc, withoutNDC);\n\t      } else {\n\t        return new PhoneNumber('USA', this.countryCode, ndc, withoutNDC);\n\t      }\n\t    }\n\t  };\n\t\n\t  NANP.prototype.splitNumber = function(number) {\n\t    if (number.length === 7) {\n\t      return Phone.compact(number.split(/(\\d{3})(\\d{4})/));\n\t    }\n\t    return [number];\n\t  };\n\t\n\t  return NANP;\n\t\n\t})();\n\t\n\tnanp = new NANP();\n\t\n\tPhone.countries['1'] = nanp;\n\t\n\tmodule.exports = nanp;\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** phone-all-bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/@vtex/phone/script/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 60ea714ee91e82d39c24\n **/","Phone = require('./Phone')\n\nargentina = require('./countries/ARG')\nbolivia   = require('./countries/BOL')\nbrazil    = require('./countries/BRA')\nchile     = require('./countries/CHL')\ncanada    = require('./countries/CAN')\ncolombia  = require('./countries/COL')\necuador   = require('./countries/ECU')\nguatemala = require('./countries/GTM')\ngbr       = require('./countries/GBR')\nmexico    = require('./countries/MEX')\nparaguay  = require('./countries/PRY')\nperu      = require('./countries/PER')\nuruguay   = require('./countries/URY')\nusa       = require('./countries/USA')\n\nwindow.vtex = window.vtex || {}\nwindow.vtex.phone = Phone\n\nmodule.exports = Phone\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/phone-all-countries.coffee\n **/","\nclass Phone\n\tconstructor: ->\n\t\t# Like so: +55 21 9898 6565\n\t\t@INTERNATIONAL = 0\n\n\t\t# Like so: (21) 9898-6565\n\t\t@NATIONAL = 1\n\n\t\t# And: 9898-6565\n\t\t@LOCAL = 2\n\n\t\t@countries = {}\n\n\tgetPhoneNational: (nationalNumber, givenCountryCode, givenNationalDestinationCode) =>\n\t\treturn null if nationalNumber is null\n\t\tnationalNumber = @normalize(nationalNumber) # Clean up number\n\n\t\tcountryObj = @countries[givenCountryCode]\n\t\tif not countryObj then return null\n\n\t\tif givenNationalDestinationCode\n\t\t\tnationalDestinationCode = givenNationalDestinationCode\n\t\t\t[foundNDC, ndcRegex] = @testNDC(nationalDestinationCode, countryObj, nationalNumber)\n\t\telse\n\t\t\tfor nationalDestinationCode in countryObj.nationalDestinationCode\n\t\t\t\t[foundNDC, ndcRegex] = @testNDC(nationalDestinationCode, countryObj, nationalNumber)\n\t\t\t\tbreak if foundNDC is true\n\n\t\tif not foundNDC then return null\n\n\t\twithoutNDC = nationalNumber.replace(ndcRegex, \"\")\n\n\t\tphoneNumber = countryObj.specialRules(nationalNumber, withoutNDC, nationalDestinationCode)\n\n\t\tif phoneNumber\n\t\t\tphoneNumber.valid(true)\n\t\t\treturn phoneNumber\n\t\telse\n\t\t\treturn null\n\n\tgetPhoneInternational: (number, givenCountryCode, givenNationalDestinationCode) =>\n\t\treturn null if number is null\n\t\tnumber = @normalize(number) # Clean up number\n\n\t\tif givenCountryCode\n\t\t\tcountryCode = givenCountryCode\n\t\t\t[foundCountryCode, countryCodeRegex] = @testCountryCode(countryCode, number)\n\t\telse\n\t\t\tfor countryCode, countryObj of @countries\n\t\t\t\t[foundCountryCode, countryCodeRegex] = @testCountryCode(countryCode, number)\n\t\t\t\tbreak if foundCountryCode is true\n\n\t\tif not foundCountryCode then return null\n\n\t\twithoutCountryCode = number.replace(countryCodeRegex, \"\")\n\t\treturn @getPhoneNational(withoutCountryCode, countryCode, givenNationalDestinationCode)\n\n\tnormalize: (number) =>\n\t\t# Remove whitespaces, parenthesis, slashes, dots, plus sign and letters\n\t\treturn number.replace(/\\ |\\(|\\)|\\-|\\.|[A-z]|\\+/g, \"\")\n\n\tcompact: (array) =>\n\t\tnewArray = []\n\t\tfor element in array\n\t\t\tnewArray.push element if element isnt \"\"\n\t\treturn newArray\n\n\tvalidate: (number, givenCountryCode) =>\n\t\treturn false if number is null\n\t\tnumber = @normalize(number)\n\n\t\tif givenCountryCode\n\t\t\treturn @countries[givenCountryCode].regex.test(number)\n\t\telse\n\t\t\tfor countryCode, countryObj of @countries\n\t\t\t\treturn true if countryObj.regex.test(number)\n\t\t\treturn false\n\n\ttestCountryCode: (countryCode, number) =>\n\t\tcountryCodeRegex = new RegExp \"^\"+countryCode\n\n\t\tif countryCodeRegex.test(number) then [true, countryCodeRegex] else [false, null]\n\n\ttestNDC: (nationalDestinationCode, countryObj, number) =>\n\t\tndcPattern = \"^(\"+countryObj.optionalTrunkPrefix+\"|)\"+nationalDestinationCode\n\t\tndcRegex = new RegExp ndcPattern\n\n\t\tif ndcRegex.test(number) then [true, ndcRegex] else [false, null]\n\n\tformat: (phone, format = @INTERNATIONAL) =>\n\t\treturn null if phone is null\n\n\t\tif @countries[phone.countryCode].format\n\t\t\treturn @countries[phone.countryCode].format(phone, format)\n\n\t\tresultString = \"\"\n\n\t\tsplitNumber = @countries[phone.countryCode].splitNumber(phone.number)\n\n\t\tswitch format\n\t\t\twhen @INTERNATIONAL\n\t\t\t\tresultString = \"+\" + phone.countryCode + \" \"\n\t\t\t\tif phone.nationalDestinationCode\n\t\t\t\t\tresultString += phone.nationalDestinationCode + \" \"\n\t\t\t\tresultString += splitNumber.join(\" \")\n\n\t\t\twhen @NATIONAL\n\t\t\t\tif phone.nationalDestinationCode\n\t\t\t\t\tresultString += \"(\" + phone.nationalDestinationCode + \") \"\n\t\t\t\tseparator = @countries[phone.countryCode].nationalNumberSeparator\n\t\t\t\tresultString += splitNumber.join(separator)\n\n\t\t\twhen @LOCAL\n\t\t\t\tseparator = @countries[phone.countryCode].nationalNumberSeparator\n\t\t\t\tresultString = splitNumber.join(separator)\n\n\t\treturn resultString\n\n\tgetCountryCodeByName: (name) =>\n\t\tfor key, value of @countries\n\t\t\tif value.countryName is name\n\t\t\t\treturn value.countryCode\n\n\tgetCountryCodeByNameAbbr: (nameAbbr) =>\n\t\tfor key, value of @countries\n\t\t\tif value.countryNameAbbr is nameAbbr\n\t\t\t\treturn value.countryCode\n\n# exports\nmodule.exports = new Phone()\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/Phone.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# https://www.numberingplans.com/?page=dialling&sub=areacodes\n# http://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers#Argentina\n# http://cambiodenumeracion.movistararg.com/index_t.html\nclass Argentina\n\tconstructor: ->\n\t\t@countryName = \"Argentina\"\n\t\t@countryNameAbbr = \"ARG\"\n\t\t@countryCode = '54'\n\t\t@regex = /^(?:(?:\\+|)54|)(?:0|)(?:(?:9(?:0|)(?:(?:11\\d{8})|(?:2(?:20|21|23|30|36|37|49|60|61|63|64|66|80|91|94|97|98|99)|3(?:36|41|42|43|45|45|48|51|53|58|62|64|70|76|79|80|81|83|85|87|88))\\d{7})|(?:2(?:2(?:02|21|23|24|25|26|27|29|41|42|43|44|45|46|52|54|55|57|61|62|64|65|66|67|68|71|72|73|74|81|83|84|85|86|91|92|96|97)|3(?:02|14|16|17|20|23|24|25|26|31|33|34|35|37|38|42|43|44|45|46|52|53|54|55|56|57|58|92|93|94|95|96)|4(?:73|74|75|77|78)|6(?:22|24|25|26|46|47|48|51|55|56|57|58)|9(?:01|02|03|20|21|22|23|24|25|26|27|28|29|31|32|33|34|35|36|40|42|45|46|48|52|53|54|62|63|64|66|72|82|83))|3(?:3(?:27|29|82|85|87|88)|4(?:00|01|02|04|05|06|07|08|09|35|36|37|38|42|44|45|46|47|54|55|56|58|60|62|63|64|65|66|67|68|69|71|72|76|82|83|87|89|91|92|93|96|97|98)|5(?:21|22|24|25|32|33|37|41|42|43|44|46|47|48|49|62|63|64|71|72|73|74|75|76|82|83|84|85)|7(?:11|15|16|18|21|25|31|34|35|41|43|51|54|55|56|57|58|72|73|74|75|77|81|82|86)|8(?:21|25|26|27|32|35|37|38|41|43|44|45|46|54|55|56|57|58|61|62|63|65|67|68|69|73|76|77|78|85|86|87|88|91|92|94))\\d{6}))|(?:(?:11(?:15\\d{8}|(?!15)\\d{8}))|(?:(?:2(?:20|21|23|30|36|37|49|60|61|63|64|66|80|91|94|97|98|99)|3(?:36|41|42|43|45|45|48|51|53|58|62|64|70|76|79|80|81|83|85|87|88))(?:15\\d{7}|(?!15)\\d{7}))|(?:2(?:2(?:02|21|23|24|25|26|27|29|41|42|43|44|45|46|52|54|55|57|61|62|64|65|66|67|68|71|72|73|74|81|83|84|85|86|91|92|96|97)|3(?:02|14|16|17|20|23|24|25|26|31|33|34|35|37|38|42|43|44|45|46|52|53|54|55|56|57|58|92|93|94|95|96)|4(?:73|74|75|77|78)|6(?:22|24|25|26|46|47|48|51|55|56|57|58)|9(?:01|02|03|20|21|22|23|24|25|26|27|28|29|31|32|33|34|35|36|40|42|45|46|48|52|53|54|62|63|64|66|72|82|83))|3(?:3(?:27|29|82|85|87|88)|4(?:00|01|02|04|05|06|07|08|09|35|36|37|38|42|44|45|46|47|54|55|56|58|60|62|63|64|65|66|67|68|69|71|72|76|82|83|87|89|91|92|93|96|97|98)|5(?:21|22|24|25|32|33|37|41|42|43|44|46|47|48|49|62|63|64|71|72|73|74|75|76|82|83|84|85)|7(?:11|15|16|18|21|25|31|34|35|41|43|51|54|55|56|57|58|72|73|74|75|77|81|82|86)|8(?:21|25|26|27|32|35|37|38|41|43|44|45|46|54|55|56|57|58|61|62|63|65|67|68|69|73|76|77|78|85|86|87|88|91|92|94)))(?:15\\d{6}|(?!15)\\d{6})))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = '-'\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'9', '11', '220', '221', '223', '230', '236','237', '249', '260', '261', '263', '264', '266', '280', '291', '294', '297', '298', '299', '336', '341', '342', '343', '345', '345', '348', '351', '353', '358', '362', '364', '370', '376', '379', '380', '381', '383', '385', '387', '388', '2202', '2221', '2223', '2224', '2225', '2226', '2227', '2229', '2241', '2242', '2243', '2244', '2245', '2246', '2252', '2254', '2255', '2257', '2261', '2262', '2264', '2265', '2266', '2267', '2268', '2271', '2272', '2273', '2274', '2281', '2283', '2284', '2285', '2286', '2291', '2292', '2296', '2297', '2302', '2314', '2316', '2317', '2320', '2323', '2324', '2325', '2326', '2331', '2333', '2334', '2335', '2337', '2338', '2342', '2343', '2344', '2345', '2346', '2352', '2353', '2354', '2355', '2356', '2357', '2358', '2392', '2393', '2394', '2395', '2396', '2473', '2474', '2475', '2477', '2478', '2622', '2624', '2625', '2626', '2646', '2647', '2648', '2651', '2655', '2656', '2657', '2658', '2901', '2902', '2903', '2920', '2921', '2922', '2923', '2924', '2925', '2926', '2927', '2928', '2929', '2931', '2932', '2933', '2934', '2935', '2936', '2940', '2942', '2945', '2946', '2948', '2952', '2953', '2954', '2962', '2963', '2964', '2966', '2972', '2982', '2983', '3327', '3329', '3382', '3385', '3387', '3388', '3400', '3401', '3402', '3404', '3405', '3406', '3407', '3408', '3409', '3435', '3436', '3437', '3438', '3442', '3444', '3445', '3446', '3447', '3454', '3455', '3456', '3458', '3460', '3462', '3463', '3464', '3465', '3466', '3467', '3468', '3469', '3471', '3472', '3476', '3482', '3483', '3487', '3489', '3491', '3492', '3493', '3496', '3497', '3498', '3521', '3522', '3524', '3525', '3532', '3533', '3537', '3541', '3542', '3543', '3544', '3546', '3547', '3548', '3549', '3562', '3563', '3564', '3571', '3572', '3573', '3574', '3575', '3576', '3582', '3583', '3584', '3585', '3711', '3715', '3716', '3718', '3721', '3725', '3731', '3734', '3735', '3741', '3743', '3751', '3754', '3755', '3756', '3757', '3758', '3772', '3773', '3774', '3775', '3777', '3781', '3782', '3786', '3821', '3825', '3826', '3827', '3832', '3835', '3837', '3838', '3841', '3843', '3844', '3845', '3846', '3854', '3855', '3856', '3857', '3858', '3861', '3862', '3863', '3865', '3867', '3868', '3869', '3873', '3876', '3877', '3878', '3885', '3886', '3887', '3888', '3891', '3892', '3894'\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\t\tif ndc is '9'\n\t\t\t\twithoutCountryCode = withoutNDC\n\n\t\t\t\tndcArray = @nationalDestinationCode.slice(1)\n\t\t\t\tfor nationalDestinationCode in ndcArray\n\t\t\t\t\t[foundNDC, ndcRegex] = Phone.testNDC(nationalDestinationCode, @, withoutCountryCode)\n\t\t\t\t\tbreak if foundNDC is true\n\t\t\t\treturn null if !foundNDC\n\t\t\t\twithoutNDC = withoutCountryCode.replace(ndcRegex, \"\")\n\t\t\t\treturn null if withoutNDC.length + nationalDestinationCode.length isnt 10\n\n\t\t\t\tphone.isMobile = true\n\t\t\t\tphone.nationalDestinationCode = nationalDestinationCode\n\t\t\t\tphone.number = withoutNDC\n\t\t\t\treturn phone\n\t\telse if /^15/.test(withoutNDC) and (ndc.length + withoutNDC.length) is 12\n\t\t\t\twithoutNDC = withoutNDC.replace(/^15/, \"\")\n\t\t\t\tphone.isMobile = true\n\t\t\t\tphone.number = withoutNDC\n\t\t\t\treturn phone\n\t\telse if (ndc.length + withoutNDC.length) is 10\n\t\t\treturn phone\n\n\n\tsplitNumber: (number) =>\n\t\tswitch number.length\n\t\t\twhen 8\n\t\t\t\treturn Phone.compact number.split(/(\\d{4})(\\d{4})/)\n\t\t\twhen 7\n\t\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\t\twhen 6\n\t\t\t\treturn Phone.compact number.split(/(\\d{2})(\\d{4})/)\n\n\t\treturn [number]\n\n\tformat: (phone, format = Phone.INTERNATIONAL) =>\n\t\tresultString = \"\"\n\n\t\tsplitNumber = Phone.countries[phone.countryCode].splitNumber(phone.number)\n\n\t\tswitch format\n\t\t\twhen Phone.INTERNATIONAL\n\t\t\t\tresultString = \"+\" + phone.countryCode + \" \"\n\t\t\t\tif phone.isMobile then resultString += \"9 \"\n\t\t\t\tif phone.nationalDestinationCode\n\t\t\t\t\tresultString += phone.nationalDestinationCode + \" \"\n\t\t\t\tresultString += splitNumber.join(\" \")\n\t\t\twhen Phone.NATIONAL\n\t\t\t\tif phone.nationalDestinationCode\n\t\t\t\t\tresultString += \"(\" + phone.nationalDestinationCode + \") \"\n\t\t\t\tseparator = Phone.countries[phone.countryCode].nationalNumberSeparator\n\t\t\t\tif phone.isMobile then resultString += \"15 \"\n\t\t\t\tresultString += splitNumber.join(separator)\n\t\t\twhen Phone.LOCAL\n\t\t\t\tseparator = Phone.countries[phone.countryCode].nationalNumberSeparator\n\t\t\t\tresultString = splitNumber.join(separator)\n\t\t\telse\n\t\t\t\tresultString = \"\"\n\n\t\treturn resultString\n\n# register\nargentina = new Argentina()\nPhone.countries['54'] = argentina\n\n# exports\nmodule.exports = argentina\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/ARG.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# http://www.howtocallabroad.com/bolivia/\nclass Bolivia\n\tconstructor: ->\n\t\t@countryName = \"Bolivia\"\n\t\t@countryNameAbbr = \"BOL\"\n\t\t@countryCode = '591'\n\t\t@regex = /^(?:(?:(?:\\+|)591)|)(?:0|)(?:(?:(?:[234]|)\\d{7}))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'2', '3', '4',\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\t\treturn phone\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\nbolivia = new Bolivia()\nPhone.countries['591'] = bolivia\n\n# exports\nmodule.exports = bolivia\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/BOL.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# https://www.numberingplans.com/?page=dialling&sub=areacodes\n# (1) http://www.anatel.gov.br/Portal/exibirPortalPaginaEspecialPesquisa.do?acao=&tipoConteudoHtml=1&codNoticia=27199\n# http://en.wikipedia.org/wiki/Local_conventions_for_writing_telephone_numbers#Brazil\nclass Brazil\n\tconstructor: ->\n\t\t@countryName = \"Brazil\"\n\t\t@countryNameAbbr = \"BRA\"\n\t\t@countryCode = '55'\n\t\t@regex = /^(?:(?:(?:\\+|)(?:55|)|))(?:0|)(?:(?:(?:1[1-9]|2[12478]|3[1-8]|7[134579]|8[1-9]|9[1-9])(?:9\\d{8}|\\d{8}))|(?:(?:4[1-9]|5[1-5]|6[1-9])\\d{8}))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = '-'\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24', '27', '28', '31', '32', '33', '34', '35', '36', '37', '38', '41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '52', '53', '54', '55', '61', '62', '63', '64', '65', '66', '67', '68', '69', '71', '72', '73', '74', '75', '77', '78', '79', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92', '93', '94', '95', '96', '97', '98', '99'\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\t# Needs to be updated in 2015 (as in link (1) above)\n\t\tnoNineDigitsNDC = ['41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '53', '54', '55', '61', '62', '63', '64', '65', '66', '67', '68', '69']\n\t\tnoNineDigitsPattern = new RegExp \"^(0|)(\"+noNineDigitsNDC.join(\"|\")+\")\"\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\n\t\tif withoutNDC.length is 9 and withoutNDC.indexOf(\"9\") is 0 and !noNineDigitsPattern.test(ndc)\n\t\t\tphone.isMobile = true\n\t\t\treturn phone\n\t\telse\n\t\t\tif withoutNDC.length is 8 then return phone\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 8\n\t\t\treturn Phone.compact number.split(/(\\d{4})(\\d{4})/)\n\t\telse if number.length is 9 and number.indexOf(\"9\") is 0\n\t\t\treturn Phone.compact number.split(/(\\d{5})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\nbrazil = new Brazil()\nPhone.countries['55'] = brazil\n\n# exports\nmodule.exports = brazil\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/BRA.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# https://www.numberingplans.com/?page=dialling&sub=areacodes\n# http://www.howtocallabroad.com/chile/\n# (1) http://www.cambionumeracion.cl/?page_id=4\nclass Chile\n\tconstructor: ->\n\t\t@countryName = \"Chile\"\n\t\t@countryNameAbbr = \"CHL\"\n\t\t@countryCode = '56'\n\t\t@regex = /^(?:(?:\\+|)56|)(?:0|)(?:(?:(?:2|9)\\d{8})|(?:58\\d{7})|(?:(?:3[2345]|4[1235]|5[123578]|6[134578]|7[1235])\\d{6,7}))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'2','32','33','34','35','41','42','43','45','51','52','53','55','57','58','61','63','64','65','67','68','71','72','73','75', '9' # 9 is mobile\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\t\tswitch ndc\n\t\t\twhen '2'\n\t\t\t\tif withoutNDC.length is 8 then return phone\n\t\t\twhen '9'\n\t\t\t\tif withoutNDC.length is 8\n\t\t\t\t\tphone.isMobile = true\n\t\t\t\t\tphone.nationalDestinationCode = ''\n\t\t\t\t\tphone.number = withoutCountryCode\n\t\t\t\t\treturn phone\n\t\t\twhen '58'\n\t\t\t\tif withoutNDC.length is 7 then return phone\n\t\t\telse\n\t\t\t# Should be updated based on link (1)\n\t\t\t\tif withoutNDC.length is 6 or withoutNDC.length is 7 then return phone\n\n\tsplitNumber: (number) =>\n\t\tswitch number.length\n\t\t\twhen 9\n\t\t\t\treturn Phone.compact number.split(/(\\d{1})(\\d{4})(\\d{4})/)\n\t\t\twhen 8\n\t\t\t\treturn Phone.compact number.split(/(\\d{4})(\\d{4})/)\n\t\t\twhen 7\n\t\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\t\twhen 6\n\t\t\t\treturn Phone.compact number.split(/(\\d{2})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\nchile = new Chile()\nPhone.countries['56'] = chile\n\n# exports\nmodule.exports = chile\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/CHL.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\nnanp = require('./NANP')\n\n# exports\nmodule.exports = nanp\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/CAN.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# https://www.numberingplans.com/?page=dialling&sub=areacodes\n# http://en.wikipedia.org/wiki/Telephone_numbers_in_Colombia\nclass Colombia\n\tconstructor: ->\n\t\t@countryName = \"Colombia\"\n\t\t@countryNameAbbr = \"COL\"\n\t\t@countryCode = '57'\n\t\t@regex = /^(?:(?:\\+|)57|)(?:0|)(?:(?:[12345678]\\d{7})|(?:3\\d{9}))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'3(\\\\d{2})', '1', '2', '3', '4', '5', '6', '7', '8'\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, '', withoutNDC)\n\t\tif withoutCountryCode.indexOf('3') is 0 and withoutCountryCode.length is 10\n\t\t\tphone.isMobile = true\n\t\t\tphone.number = withoutCountryCode\n\t\t\tphone.nationalDestinationCode = ''\n\t\t\treturn phone\n\t\telse\n\t\t\tif withoutNDC.length is 7\n\t\t\t\tphone.nationalDestinationCode = ndc\n\t\t\t\treturn phone\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\telse if number.length is 10\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{3})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\ncolombia = new Colombia()\nPhone.countries['57'] = colombia\n\n# exports\nmodule.exports = colombia\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/COL.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# http://en.wikipedia.org/wiki/Telephone_numbers_in_Ecuador\n# http://www.howtocallabroad.com/ecuador/\nclass Ecuador\n\tconstructor: ->\n\t\t@countryName = \"Ecuador\"\n\t\t@countryNameAbbr = \"ECU\"\n\t\t@countryCode = '593'\n\t\t@regex = /^(?:(?:(?:\\+|)593)|)(?:0|)(?:(?:(?:[234567])\\d{7})|(?:9\\d{8}))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'2', '3', '4', '5', '6', '7', '9'\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\t\tif withoutNDC.length is 7 and ndc isnt '9'\n\t\t\treturn phone\n\t\telse if ndc is '9'and withoutNDC.length is 8\n\t\t\tphone.isMobile = true\n\t\t\tphone.number = withoutCountryCode\n\t\t\tphone.nationalDestinationCode = ''\n\t\t\treturn phone\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\telse if number.length is 9\n\t\t\tif number.indexOf(\"9\") is 0\n\t\t\t\treturn Phone.compact number.split(/(\\d{2})(\\d{3})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\necuador = new Ecuador()\nPhone.countries['593'] = ecuador\n\n# exports\nmodule.exports = ecuador\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/ECU.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# https://en.wikipedia.org/wiki/Telephone_numbers_in_Guatemala\n# http://www.howtocallabroad.com/guatemala/\nclass Guatemala\n\tconstructor: ->\n\t\t@countryName = \"Guatemala\"\n\t\t@countryNameAbbr = \"GTM\"\n\t\t@countryCode = '502'\n\t\t@regex = /^(?:(?:\\+|)502|)(?:[2-7]\\d{7})$/\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode = ['2', '6', '7', '3', '4', '5']\n\t\t@mobileNumbers = ['3', '4', '5']\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\n\t\tif withoutCountryCode.length isnt 8\n\t\t\treturn null\n\t\tif ndc and withoutNDC[0] in @mobileNumbers\n\t\t\tphone.isMobile = true\n\t\t\tphone.nationalDestinationCode = ''\n\t\t\tphone.number = withoutCountryCode\n\t\telse\n\t\t\tphone.isMobile = false\n\n\t\treturn phone\n\n\tformat: (phone, format) =>\n\t\tresultString = \"\"\n\n\t\tsplitNumber = @splitNumber(phone.number)\n\n\t\tswitch format\n\t\t\twhen Phone.INTERNATIONAL\n\t\t\t\tresultString = \"+\" + phone.countryCode + \" \"\n\t\t\t\tresultString += splitNumber.join(\" \")\n\n\t\t\telse\n\t\t\t\tseparator = @nationalNumberSeparator\n\t\t\t\tresultString += splitNumber.join(separator)\n\n\t\treturn resultString\n\n\tsplitNumber: (number) =>\n\t\tswitch number.length\n\t\t\twhen 8\n\t\t\t\treturn Phone.compact number.split(/(\\d{4})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\nguatemala = new Guatemala()\nPhone.countries['502'] = guatemala\n\n# exports\nmodule.exports = guatemala\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/GTM.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Formatting_GB_telephone_numbers\n# list of area codes from:\n# http://consumers.ofcom.org.uk/phone/numbering/telephone-area-codes-tool/\nclass UnitedKingdom\n\tconstructor: ->\n\t\t@countryName = \"United Kingdom\"\n\t\t@countryNameAbbr = \"GBR\"\n\t\t@countryCode = '44'\n\t\t@regex = /^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/\n\t\t@mobileRegex = /^7(?:[1-4]\\d\\d|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|624|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[04-9]\\d|1[02-9]|2[0-35-9]|3[0-689]))\\d{6}$/\n\t\t@splitRegexs =\n\t\t\t[{\n\t\t\t\t#Ranges 2d, 55, 56, 70, 76 (excluding 7624) with 10 digits\n\t\t\t\tvalidLengths: [10]\n\t\t\t\tleadingDigits: /^(?:2|5[56]|7(?:0|6(?:[013-9]|2[0-35-9])))/,\n\t\t\t\tpattern: /^(\\d{2})(\\d{4})(\\d{4})$/,\n\t\t\t\tformat: \"$1 $2 $3\"\n\t\t\t},{\n\t\t\t\t#Ranges 11d, 1d1, 3dd, 9dd with 10 digits\n\t\t\t\tvalidLengths: [10]\n\t\t\t\tleadingDigits: /^(?:1(?:1|\\d1)|3[0347]|9[018])/,\n\t\t\t\tpattern: /^(\\d{3})(\\d{3})(\\d{4})$/,\n\t\t\t\tformat: \"$1 $2 $3\"\n\t\t\t},{\n\t\t\t\t#Ranges 1dddd with 9 or 10 digits\n\t\t\t\tvalidLengths: [9, 10]\n\t\t\t\tleadingDigits: /^(?:1(?:3873|5(?:242|39[456])|697[347]|768[347]|9467))/,\n\t\t\t\tpattern: /^(\\d{5})(\\d{4,5})$/,\n\t\t\t\tformat: \"$1 $2\"\n\t\t\t},{\n\t\t\t\t#Ranges 1ddd with 9 or 10 digits\n\t\t\t\tvalidLengths: [9, 10]\n\t\t\t\tleadingDigits: /^1/,\n\t\t\t\tpattern: /^(1\\d{3})(\\d{5,6})$/,\n\t\t\t\tformat: \"$1 $2\"\n\t\t\t},{\n\t\t\t\t#Ranges 7ddd (including 7624) (not 70, 76) with 10 digits\n\t\t\t\tvalidLengths: [10]\n\t\t\t\tleadingDigits: /^7(?:[1-5789]|624)/,\n\t\t\t\tpattern: /^(7\\d{3})(\\d{6})$/,\n\t\t\t\tformat: \"$1 $2\"\n\t\t\t},{\n\t\t\t\t#Ranges 800 1111 with 7 digits : UK ChildLine\n\t\t\t\tvalidLengths: [7]\n\t\t\t\tleadingDigits: /^8001111/,\n\t\t\t\tpattern: /^(800)(\\d{4})$/,\n\t\t\t\tformat: \"$1 $2\"\n\t\t\t},{\n\t\t\t\t#Ranges 845 46 47 with 7 digits : UK NHS Direct\n\t\t\t\tvalidLengths: [7]\n\t\t\t\tleadingDigits: /^84546\\d/,\n\t\t\t\tpattern: /^(845)(46)(4\\d)$/,\n\t\t\t\tformat: \"$1 $2 $3\"\n\t\t\t},{\n\t\t\t\t#Ranges 84d, 87d with 10 digits\n\t\t\t\tvalidLengths: [10]\n\t\t\t\tleadingDigits: /^8(?:4[2-5]|7[0-3])/,\n\t\t\t\tpattern: /^(8\\d{2})(\\d{3})(\\d{4})$/,\n\t\t\t\tformat: \"$1 $2 $3\"\n\t\t\t},{\n\t\t\t\t#Ranges 80d (including 800) with 10 digits\n\t\t\t\tvalidLengths: [10]\n\t\t\t\tleadingDigits: /^80[08]/,\n\t\t\t\tpattern: /^(80\\d)(\\d{3})(\\d{4})$/,\n\t\t\t\tformat: \"$1 $2 $3\"\n\t\t\t},{\n\t\t\t\t#Ranges 500, 800 with 9 digits\n\t\t\t\tvalidLengths: [9]\n\t\t\t\tleadingDigits: /^[58]00/,\n\t\t\t\tpattern: /^([58]00)(\\d{6})$/,\n\t\t\t\tformat: \"$1 $2\"\n\t\t\t}]\n\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode = [\n\t\t\t\"20\", \"23\", \"24\", \"28\", \"29\"\n\t\t\t\"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"1200\",\n\t\t\t\"1202\", \"1204\", \"1205\", \"1206\", \"1207\", \"1208\", \"1209\",\n\t\t\t\"121\", \"1223\", \"1224\", \"1225\", \"1226\", \"1227\", \"1228\",\n\t\t\t\"1229\", \"1233\", \"1234\", \"1235\", \"1236\", \"1237\", \"1239\",\n\t\t\t\"1241\", \"1242\", \"1243\", \"1244\", \"1245\", \"1246\", \"1248\",\n\t\t\t\"1249\", \"1250\", \"1252\", \"1253\", \"1254\", \"1255\", \"1256\",\n\t\t\t\"1257\", \"1258\", \"1259\", \"1260\", \"1261\", \"1262\", \"1263\",\n\t\t\t\"1264\", \"1267\", \"1268\", \"1269\", \"1270\", \"1271\", \"1273\",\n\t\t\t\"1274\", \"1275\", \"1276\", \"1277\", \"1278\", \"1279\", \"1280\",\n\t\t\t\"1282\", \"1283\", \"1284\", \"1285\", \"1286\", \"1287\", \"1288\",\n\t\t\t\"1289\", \"1290\", \"1291\", \"1292\", \"1293\", \"1294\", \"1295\",\n\t\t\t\"1296\", \"1297\", \"1298\", \"1299\", \"1300\", \"1301\", \"1302\",\n\t\t\t\"1303\", \"1304\", \"1305\", \"1306\", \"1307\", \"1308\", \"1309\",\n\t\t\t\"131\", \"1320\", \"1322\", \"1323\", \"1324\", \"1325\", \"1326\",\n\t\t\t\"1327\", \"1328\", \"1329\", \"1330\", \"1332\", \"1333\", \"1334\",\n\t\t\t\"1335\", \"1337\", \"1339\", \"1340\", \"1341\", \"1342\", \"1343\",\n\t\t\t\"1344\", \"1346\", \"1347\", \"1348\", \"1349\", \"1350\", \"1352\",\n\t\t\t\"1353\", \"1354\", \"1355\", \"1356\", \"1357\", \"1358\", \"1359\",\n\t\t\t\"1360\", \"1361\", \"1362\", \"1363\", \"1364\", \"1366\", \"1367\",\n\t\t\t\"1368\", \"1369\", \"1371\", \"1372\", \"1373\", \"1375\", \"1376\",\n\t\t\t\"1377\", \"1379\", \"1380\", \"1381\", \"1382\", \"1383\", \"1384\",\n\t\t\t\"1386\", \"1387\", \"13873\", \"1388\", \"1389\", \"1392\", \"1394\",\n\t\t\t\"1395\", \"1397\", \"1398\", \"1400\", \"1403\", \"1404\", \"1405\",\n\t\t\t\"1406\", \"1407\", \"1408\", \"1409\", \"141\", \"1420\", \"1422\",\n\t\t\t\"1423\", \"1424\", \"1425\", \"1427\", \"1428\", \"1429\", \"1430\",\n\t\t\t\"1431\", \"1432\", \"1433\", \"1434\", \"1435\", \"1436\", \"1437\",\n\t\t\t\"1438\", \"1439\", \"1440\", \"1442\", \"1443\", \"1444\", \"1445\",\n\t\t\t\"1446\", \"1449\", \"1450\", \"1451\", \"1452\", \"1453\", \"1454\",\n\t\t\t\"1455\", \"1456\", \"1457\", \"1458\", \"1460\", \"1461\", \"1462\",\n\t\t\t\"1463\", \"1464\", \"1465\", \"1466\", \"1467\", \"1469\", \"1470\",\n\t\t\t\"1471\", \"1472\", \"1473\", \"1474\", \"1475\", \"1476\", \"1477\",\n\t\t\t\"1478\", \"1479\", \"1480\", \"1481\", \"1482\", \"1483\", \"1484\",\n\t\t\t\"1485\", \"1487\", \"1488\", \"1489\", \"1490\", \"1491\", \"1492\",\n\t\t\t\"1493\", \"1494\", \"1495\", \"1496\", \"1497\", \"1499\", \"1501\",\n\t\t\t\"1502\", \"1503\", \"1505\", \"1506\", \"1507\", \"1508\", \"1509\",\n\t\t\t\"151\", \"1520\", \"1522\", \"1524\", \"15242\", \"1525\", \"1526\",\n\t\t\t\"1527\", \"1528\", \"1529\", \"1530\", \"1531\", \"1534\", \"1535\",\n\t\t\t\"1536\", \"1538\", \"1539\", \"15394\", \"15395\", \"15396\", \"1540\",\n\t\t\t\"1542\", \"1543\", \"1544\", \"1545\", \"1546\", \"1547\", \"1548\",\n\t\t\t\"1549\", \"1550\", \"1553\", \"1554\", \"1555\", \"1556\", \"1557\",\n\t\t\t\"1558\", \"1559\", \"1560\", \"1561\", \"1562\", \"1563\", \"1564\",\n\t\t\t\"1565\", \"1566\", \"1567\", \"1568\", \"1569\", \"1570\", \"1571\",\n\t\t\t\"1572\", \"1573\", \"1575\", \"1576\", \"1577\", \"1578\", \"1579\",\n\t\t\t\"1580\", \"1581\", \"1582\", \"1583\", \"1584\", \"1586\", \"1588\",\n\t\t\t\"1590\", \"1591\", \"1592\", \"1593\", \"1594\", \"1595\", \"1597\",\n\t\t\t\"1598\", \"1599\", \"1600\", \"1603\", \"1604\", \"1606\", \"1608\",\n\t\t\t\"1609\", \"161\", \"1620\", \"1621\", \"1622\", \"1623\", \"1624\",\n\t\t\t\"1625\", \"1626\", \"1628\", \"1629\", \"1630\", \"1631\", \"1633\",\n\t\t\t\"1634\", \"1635\", \"1636\", \"1637\", \"1638\", \"1639\", \"1641\",\n\t\t\t\"1642\", \"1643\", \"1644\", \"1646\", \"1647\", \"1650\", \"1651\",\n\t\t\t\"1652\", \"1653\", \"1654\", \"1655\", \"1656\", \"1659\", \"1661\",\n\t\t\t\"1663\", \"1664\", \"1665\", \"1666\", \"1667\", \"1668\", \"1669\",\n\t\t\t\"1670\", \"1671\", \"1672\", \"1673\", \"1674\", \"1675\", \"1676\",\n\t\t\t\"1677\", \"1678\", \"1680\", \"1681\", \"1683\", \"1684\", \"1685\",\n\t\t\t\"1686\", \"1687\", \"1688\", \"1689\", \"1690\", \"1691\", \"1692\",\n\t\t\t\"1694\", \"1695\", \"1697\", \"16973\", \"16974\", \"1698\", \"1700\",\n\t\t\t\"1702\", \"1704\", \"1706\", \"1707\", \"1708\", \"1709\", \"1720\",\n\t\t\t\"1721\", \"1722\", \"1723\", \"1724\", \"1725\", \"1726\", \"1727\",\n\t\t\t\"1728\", \"1729\", \"1730\", \"1732\", \"1733\", \"1736\", \"1737\",\n\t\t\t\"1738\", \"1740\", \"1743\", \"1744\", \"1745\", \"1746\", \"1747\",\n\t\t\t\"1748\", \"1749\", \"1750\", \"1751\", \"1752\", \"1753\", \"1754\",\n\t\t\t\"1756\", \"1757\", \"1758\", \"1759\", \"1760\", \"1761\", \"1763\",\n\t\t\t\"1764\", \"1765\", \"1766\", \"1767\", \"1768\", \"17683\", \"17684\",\n\t\t\t\"17687\", \"1769\", \"1770\", \"1771\", \"1772\", \"1773\", \"1775\",\n\t\t\t\"1776\", \"1777\", \"1778\", \"1779\", \"1780\", \"1782\", \"1784\",\n\t\t\t\"1785\", \"1786\", \"1787\", \"1788\", \"1789\", \"1790\", \"1792\",\n\t\t\t\"1793\", \"1794\", \"1795\", \"1796\", \"1797\", \"1798\", \"1799\",\n\t\t\t\"1803\", \"1805\", \"1806\", \"1807\", \"1808\", \"1809\", \"1821\",\n\t\t\t\"1822\", \"1823\", \"1824\", \"1825\", \"1827\", \"1828\", \"1829\",\n\t\t\t\"1830\", \"1832\", \"1833\", \"1834\", \"1835\", \"1837\", \"1838\",\n\t\t\t\"1840\", \"1841\", \"1842\", \"1843\", \"1844\", \"1845\", \"1847\",\n\t\t\t\"1848\", \"1851\", \"1852\", \"1854\", \"1855\", \"1856\", \"1857\",\n\t\t\t\"1858\", \"1859\", \"1862\", \"1863\", \"1864\", \"1865\", \"1866\",\n\t\t\t\"1869\", \"1870\", \"1871\", \"1872\", \"1873\", \"1874\", \"1875\",\n\t\t\t\"1876\", \"1877\", \"1878\", \"1879\", \"1880\", \"1882\", \"1883\",\n\t\t\t\"1884\", \"1885\", \"1886\", \"1887\", \"1888\", \"1889\", \"1890\",\n\t\t\t\"1892\", \"1895\", \"1896\", \"1899\", \"1900\", \"1902\", \"1903\",\n\t\t\t\"1904\", \"1905\", \"1908\", \"1909\", \"191\", \"1920\", \"1922\",\n\t\t\t\"1923\", \"1924\", \"1925\", \"1926\", \"1928\", \"1929\", \"1931\",\n\t\t\t\"1932\", \"1933\", \"1934\", \"1935\", \"1937\", \"1938\", \"1939\",\n\t\t\t\"1942\", \"1943\", \"1944\", \"1945\", \"1946\", \"19467\", \"1947\",\n\t\t\t\"1948\", \"1949\", \"1950\", \"1951\", \"1952\", \"1953\", \"1954\",\n\t\t\t\"1955\", \"1957\", \"1959\", \"1962\", \"1963\", \"1964\", \"1967\",\n\t\t\t\"1968\", \"1969\", \"1970\", \"1971\", \"1972\", \"1974\", \"1975\",\n\t\t\t\"1977\", \"1978\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\",\n\t\t\t\"1985\", \"1986\", \"1987\", \"1988\", \"1989\", \"1992\", \"1993\",\n\t\t\t\"1994\", \"1995\", \"1997\"\n\t\t]\n\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\t\tif withoutNDC.length is 10 and @mobileRegex.test(withoutNDC)\n\t\t\tphone.isMobile = true\n\n\t\treturn phone\n\n\tsplitNumber: (number) =>\n\t\tfindSplitter = do ->\n\t\t\t(nmbr, splitRegexs) ->\n\t\t\t\tfor potentialSplitGrp in splitRegexs\n\t\t\t\t\tif nmbr.length in potentialSplitGrp.validLengths and potentialSplitGrp.leadingDigits.test(nmbr)\n\t\t\t\t\t\treturn potentialSplitGrp\n\n\t\tsplitter = findSplitter(number, @splitRegexs)\n\n\t\tif splitter\n\t\t\treturn Phone.compact number.split(splitter.pattern)\n\t\telse\n\t\t\treturn [number]\n\n# register\nuk = new UnitedKingdom()\nPhone.countries['44'] = uk\n\n# exports\nmodule.exports = uk\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/GBR.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# http://www.sre.gob.mx/austin/Util/LadasMexico.html\nclass Mexico\n\tconstructor: ->\n\t\t@countryName = \"Mexico\"\n\t\t@countryNameAbbr = \"MEX\"\n\t\t@countryCode = '52'\n\t\t@regex = /^(?:(?:\\+|)52|)(?:(?:33|55|81)\\d{8}|(?:22[2-9]|23[1-35-8]|24[13-9]|27[1-9]|28[1-578]|29[467]|31[1-9]|32[1-9]|34[1-9]|35[1-9]|37[1-9]|38[1-9]|39[1-5]|41[1-5]|41[7-9|42[1-9]|43[1-8]|44[1-57-9]|45[1-9]|46[1-9]|47[1-8]|48[1-35-9]|49[2-689]|588|59[1-79]|61[2-68]|62[1-9]|63[1-9]|64[1-9]|65[1-3689]|66[12457-9]|67[1-7]|68[67]|69[4-8]|71[1-9]|72[1-9]|73[1-9]|74[1-9]|75[13-9]|76[1-9]|77[1-9]|78[1-69]|79[17]|82[13-9]|83[1-6]|84[124-6]|86[1246-9]|87[1-378]|89[12479]|91[346-9]|92[1-4]|93[2-46-8]|95[1348]|96[1-9]|97[12]|98[1-7]|99[1-9])\\d{7})$/\n\t\t@optionalTrunkPrefix = ''\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t\"33\", \"55\", \"81\", \"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"231\",\"232\",\"233\",\"235\",\"236\",\"237\",\"238\",\"241\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"278\",\"279\",\"281\",\"282\",\"283\",\"284\",\"285\",\"287\",\"288\",\"294\",\"296\",\"297\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"371\",\"372\",\"373\",\"374\",\"375\",\"376\",\"377\",\"378\",\"379\",\"381\",\"382\",\"383\",\"384\",\"385\",\"386\",\"387\",\"388\",\"389\",\"391\",\"392\",\"393\",\"394\",\"395\",\"411\",\"412\",\"413\",\"414\",\"415\",\"417\",\"418\",\"419\",\"421\",\"422\",\"423\",\"424\",\"425\",\"426\",\"427\",\"428\",\"429\",\"431\",\"432\",\"433\",\"434\",\"435\",\"436\",\"437\",\"438\",\"441\",\"442\",\"443\",\"444\",\"445\",\"447\",\"448\",\"449\",\"451\",\"452\",\"453\",\"454\",\"455\",\"456\",\"457\",\"458\",\"459\",\"461\",\"462\",\"463\",\"464\",\"465\",\"466\",\"467\",\"468\",\"469\",\"471\",\"472\",\"473\",\"474\",\"475\",\"476\",\"477\",\"478\",\"481\",\"482\",\"483\",\"485\",\"486\",\"487\",\"488\",\"489\",\"492\",\"493\",\"494\",\"495\",\"496\",\"498\",\"499\",\"588\",\"591\",\"592\",\"593\",\"594\",\"595\",\"596\",\"597\",\"599\",\"612\",\"613\",\"614\",\"615\",\"616\",\"618\",\"621\",\"622\",\"623\",\"624\",\"625\",\"626\",\"627\",\"628\",\"629\",\"631\",\"632\",\"633\",\"634\",\"635\",\"636\",\"637\",\"638\",\"639\",\"641\",\"642\",\"643\",\"644\",\"645\",\"646\",\"647\",\"648\",\"649\",\"651\",\"652\",\"653\",\"656\",\"658\",\"659\",\"661\",\"662\",\"664\",\"665\",\"667\",\"668\",\"669\",\"671\",\"672\",\"673\",\"674\",\"675\",\"676\",\"677\",\"686\",\"687\",\"694\",\"695\",\"696\",\"697\",\"698\",\"711\",\"712\",\"713\",\"714\",\"715\",\"716\",\"717\",\"718\",\"719\",\"721\",\"722\",\"723\",\"724\",\"725\",\"726\",\"727\",\"728\",\"729\",\"731\",\"732\",\"733\",\"734\",\"735\",\"736\",\"737\",\"738\",\"739\",\"741\",\"742\",\"743\",\"744\",\"745\",\"746\",\"747\",\"748\",\"749\",\"751\",\"753\",\"754\",\"755\",\"756\",\"757\",\"758\",\"759\",\"761\",\"762\",\"763\",\"764\",\"765\",\"766\",\"767\",\"768\",\"769\",\"771\",\"772\",\"773\",\"774\",\"775\",\"776\",\"777\",\"778\",\"779\",\"781\",\"782\",\"783\",\"784\",\"785\",\"786\",\"789\",\"791\",\"797\",\"821\",\"823\",\"824\",\"825\",\"826\",\"827\",\"828\",\"829\",\"831\",\"832\",\"833\",\"834\",\"835\",\"836\",\"841\",\"842\",\"844\",\"845\",\"846\",\"861\",\"862\",\"864\",\"866\",\"867\",\"868\",\"869\",\"871\",\"872\",\"873\",\"877\",\"878\",\"891\",\"892\",\"894\",\"897\",\"899\",\"913\",\"914\",\"916\",\"917\",\"918\",\"919\",\"921\",\"922\",\"923\",\"924\",\"932\",\"933\",\"934\",\"936\",\"937\",\"938\",\"951\",\"953\",\"954\",\"958\",\"961\",\"962\",\"963\",\"964\",\"965\",\"966\",\"967\",\"968\",\"969\",\"971\",\"972\",\"981\",\"982\",\"983\",\"984\",\"985\",\"986\",\"987\",\"988\",\"991\",\"992\",\"993\",\"994\",\"995\",\"996\",\"997\",\"998\",\"999\"\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tif withoutNDC.length is 7 or withoutNDC.length is 8\n\t\t\treturn new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\telse if number.length is 8\n\t\t\treturn Phone.compact number.split(/(\\d{4})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\nmexico = new Mexico()\nPhone.countries['52'] = mexico\n\n# exports\nmodule.exports = mexico\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/MEX.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# http://www.copaco.com.py/portal/index.php/atencion-al-cliente/8-empresa/74-codigos-de-area.html\n# http://en.wikipedia.org/wiki/Telephone_numbers_in_Paraguay\nclass Paraguay\n\tconstructor: ->\n\t\t@countryName = \"Paraguay\"\n\t\t@countryNameAbbr = \"PRY\"\n\t\t@countryCode = '595'\n\t\t@regex = /^(?:(?:\\+|)595|)(?:0|)(?:(?:(?:21|3[289]|4[14-8]|61|7[123]|8[13])(?:\\d{7}))|(?:(?:21|3[289]|4[14-8]|61|7[123]|8[13]|2(?:2[04568]|7[15]|9[1-5])|3(?:18|3[0167]|4[2357]|5[01]|60|70)|4(?:18|2[045]|3[12]|5[13]|64|71|9[1-47])|5(?:1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[02-4]|7[0-3]|80)|6(?:3[1-3]|44|60|7[1-46-8])|7(?:17|4[0-4]|50|6[2-578]|7[05]|8[0-8]|90)|858|9(?:6[12]|7[1-356]|8[1-5]|9[1-35]))(?:\\d{6})))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'21', '32', '38', '39', '41', '44', '46', '47', '48', '61', '71', '72', '73', '81', '83', '220', '224', '225', '226', '228', '271', '275', '291', '292', '293', '294', '295', '318', '330', '331', '336', '337', '342', '343', '345', '347', '350', '351', '360', '370', '418', '420', '424', '425', '431', '432', '451', '453', '464', '471', '491', '492', '493', '494', '497', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '552', '553', '554', '570', '571', '572', '573', '580', '631', '632', '633', '644', '660', '671', '672', '673', '674', '676', '677', '678', '717', '740', '741', '742', '743', '744', '750', '762', '763', '764', '765', '767', '768', '770', '775', '780', '781', '782', '783', '784', '785', '786', '787', '788', '790', '858', '961', '962', '971', '972', '973', '975', '976', '981', '982', '983', '984', '985', '991', '992', '993', '995'\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\n\t\tif ndc.length is 3 and ndc[0] is '9'\n\t\t\tphone.isMobile = true\n\n\t\treturn phone\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\telse\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{3})/)\n\n# register\nparaguay = new Paraguay()\nPhone.countries['595'] = paraguay\n\n# exports\nmodule.exports = paraguay\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/PRY.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# https://www.numberingplans.com/?page=dialling&sub=areacodes\n# http://www.howtocallabroad.com/peru/\nclass Peru\n\tconstructor: ->\n\t\t@countryName = \"Peru\"\n\t\t@countryNameAbbr = \"PER\"\n\t\t@countryCode = '51'\n\t\t@regex = /^(?:(?:\\+|)51|)(?:0|)(?:(?:1\\d{7})|(?:9\\d{8})|(?:(?:4[1-4]|5[1-46]|6[1-7]|7[2346]|8[234])\\d{6}))$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'1','9','41','42','43','44','51','52','53','54','56','61','62','63','64','65','66','67','72','73','74','76','82','83','84'\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\t\tif ndc is '1' and withoutNDC.length is 7\n\t\t\treturn phone\n\t\telse if ndc is '9' and withoutNDC.length is 8\n\t\t\tphone.isMobile = true\n\t\t\tphone.nationalDestinationCode = ''\n\t\t\tphone.number = withoutCountryCode\n\t\t\treturn phone\n\t\telse if ndc.length is 2 and withoutNDC.length is 6\n\t\t\treturn phone\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 6\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{3})/)\n\t\telse if number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\telse if number.length is 9\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{3})(\\d{3})/)\n\n\t\treturn [number]\n\n# register\nperu = new Peru()\nPhone.countries['51'] = peru\n\n# exports\nmodule.exports = peru\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/PER.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# http://en.wikipedia.org/wiki/Telephone_numbers_in_Uruguay\n# https://www.numberingplans.com/?page=dialling&sub=areacodes\n# http://www.howtocallabroad.com/uruguay/\nclass Uruguay\n\tconstructor: ->\n\t\t@countryName = \"Uruguay\"\n\t\t@countryNameAbbr = \"URY\"\n\t\t@countryCode = '598'\n\t\t@regex = /^(?:(?:\\+|)598|)(?:0|)(?:[249]\\d{7})$/\n\t\t@optionalTrunkPrefix = '0'\n\t\t@nationalNumberSeparator = ' '\n\t\t@nationalDestinationCode =\n\t\t\t[\n\t\t\t\t'2', '4', '9' # 9 is mobile\n\t\t\t]\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tphone = new PhoneNumber(@countryNameAbbr, @countryCode, ndc, withoutNDC)\n\t\tif (ndc.length + withoutNDC.length) is 8\n\t\t\tif ndc is '9'\n\t\t\t\tphone.isMobile = true\n\t\t\tphone.nationalDestinationCode = ''\n\t\t\tphone.number = withoutCountryCode\n\t\t\treturn phone\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\t\telse if number.length is 8\n\t\t\treturn Phone.compact number.split(/(\\d{4})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\nuruguay = new Uruguay()\nPhone.countries['598'] = uruguay\n\n# exports\nmodule.exports = uruguay\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/URY.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\nnanp = require('./NANP')\n\n# exports\nmodule.exports = nanp\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/USA.coffee\n **/","\nclass PhoneNumber\n\tconstructor: (countryNameAbbr, countryCode, nationalDestinationCode, number) ->\n\t\t@countryNameAbbr = countryNameAbbr\n\t\t@countryCode = countryCode\n\t\t@nationalDestinationCode = nationalDestinationCode\n\t\t@number = number\n\t\t@isMobile = null\n\n\tvalid: (isValid) =>\n\t\t@valid = isValid\n\nmodule.exports = PhoneNumber\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/PhoneNumber.coffee\n **/","\nPhone = require('../Phone')\nPhoneNumber = require('../PhoneNumber')\n\n# For more info check:\n# http://countrycode.org/usa\n# https://en.wikipedia.org/wiki/Telephone_numbers_in_Canada\n# http://www.howtocallabroad.com/canada/\nclass NANP\n\tconstructor: ->\n\t\t@countryName = \"NANP\"\n\t\t@countryNameAbbr = \"USA/CAN\"\n\t\t@countryCode = '1'\n\t\t@regex = /^(?:(?:(?:\\+|)(?:1|))|)(?:1|)(?:2(?:0[1-9]|1[02-9]|2[4-9]|3[1469]|4[089]|5[01-46]|6[0279]|7[0468]|8[139])|3(?:0[1-9]|1[02-9]|2[0235]|3[014679]|4[137]|5[12]|6[01459]|8[056])|4(?:0[1-9]|1[02-9]|2[345]|3[0-24578]|4[023578]|50|6[49]|7[0589]|8[04]|50[1-57-9])|5(?:06|1[02-5-89]|20|3[014]|4[01]|5[179]|6[1-47]|7[013-59]|8[01567])|6(?:0[1-9]|1[0234-9]|2[036-8]|3[0169]|4[167]|5[0179]|6[01279]|7[89]|8[129])|7(?:0[1-9]|1[2-9]|2[047]|3[01247]|4[07]|5[247]|6[02-59]|7[02-589]|8[0156])|8(?:0[1-8]|1[0-9]|28|3[0-25]|4[3578]|5[06-9]|6[02-57]|7[0238])|9(?:0[1-9]|1[02-9]|2[0578]|3[15-8]|4[0179]|5[124679]|7[0-3589]|8[045]|89))\\d{7}$/\n\t\t@optionalTrunkPrefix = '1'\n\t\t@nationalNumberSeparator = ' '\n\t\t@usaNationalDestinationCode =\n\t\t\t[\n\t\t\t\t'201', '202', '203', '205', '206', '207', '208', '209', '209', '210', '212', '213', '214', '215', '216', '217', '218', '219', '224', '225', '227', '228', '229', '231', '234', '239', '240', '248', '251', '252', '253', '254', '256', '260', '262', '267', '269', '270', '274', '276', '278', '281', '283', '301', '302', '303', '304', '305', '307', '308', '309', '310', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '323', '325', '330', '331', '334', '336', '337', '339', '341', '347', '351', '352', '360', '361', '364', '369', '380', '385', '386', '401', '402', '404', '405', '406', '407', '408', '409', '410', '412', '413', '414', '415', '417', '419', '423', '424', '425', '430', '432', '434', '435', '440', '442', '443', '445', '447', '458', '464', '469', '470', '475', '478', '479', '480', '484', '501', '502', '503', '504', '505', '507', '508', '509', '510', '512', '513', '515', '516', '517', '518', '520', '530', '531', '534', '540', '541', '551', '557', '559', '561', '562', '563', '564', '567', '570', '571', '573', '574', '575', '580', '585', '586', '601', '602', '603', '605', '606', '607', '608', '609', '610', '612', '614', '615', '616', '617', '618', '619', '620', '623', '626', '627', '628', '630', '631', '636', '641', '646', '650', '651', '657', '659', '660', '661', '662', '667', '669', '678', '679', '681', '682', '689', '701', '702', '703', '704', '706', '707', '708', '712', '713', '714', '715', '716', '717', '718', '719', '720', '724', '727', '730', '731', '732', '734', '737', '740', '747', '752', '754', '757', '760', '762', '763', '764', '765', '769', '770', '772', '773', '774', '775', '779', '781', '785', '786', '801', '802', '803', '804', '805', '806', '808', '810', '812', '813', '814', '815', '816', '817', '818', '828', '830', '831', '832', '835', '843', '845', '847', '848', '850', '856', '857', '858', '859', '860', '862', '863', '864', '865', '870', '872', '878', '901', '903', '904', '906', '907', '908', '909', '910', '912', '913', '914', '915', '916', '917', '918', '919', '920', '925', '927', '928', '931', '935', '936', '937', '938', '940', '941', '947', '949', '951', '952', '954', '956', '957', '959', '970', '971', '972', '973', '975', '978', '979', '980', '984', '985', '989'\n\t\t\t]\n\t\t@canadaNationalDestinationCode =\n\t\t\t[\n\t\t\t\t'204', '226', '236', '249', '250', '289', '306', '343', '365', '403', '416', '418', '431', '437', '438', '450', '506', '514', '519', '579', '581', '587', '604', '613', '639', '647', '705', '709', '778', '780', '807', '819', '867', '873', '902', '905'\n\t\t\t]\n\t\t@nationalDestinationCode = @usaNationalDestinationCode.concat(@canadaNationalDestinationCode)\n\n\tspecialRules: (withoutCountryCode, withoutNDC, ndc) =>\n\t\tif withoutNDC.length is 7\n\t\t\tif ndc in @canadaNationalDestinationCode\n\t\t\t\treturn new PhoneNumber('CAN', @countryCode, ndc, withoutNDC)\n\t\t\telse\n\t\t\t\treturn new PhoneNumber('USA', @countryCode, ndc, withoutNDC)\n\n\tsplitNumber: (number) =>\n\t\tif number.length is 7\n\t\t\treturn Phone.compact number.split(/(\\d{3})(\\d{4})/)\n\n\t\treturn [number]\n\n# register\nnanp = new NANP()\nPhone.countries['1'] = nanp\n\n# exports\nmodule.exports = nanp\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/script/countries/NANP.coffee\n **/"],"sourceRoot":""}